{
  "version": 3,
  "sources": ["../../src/shapes/TLLineShape.ts"],
  "sourcesContent": ["import { defineMigrations } from '@tldraw/store'\nimport { IndexKey, deepCopy, getIndices, objectMapFromEntries, sortByIndex } from '@tldraw/utils'\nimport { T } from '@tldraw/validate'\nimport { StyleProp } from '../styles/StyleProp'\nimport { DefaultColorStyle } from '../styles/TLColorStyle'\nimport { DefaultDashStyle } from '../styles/TLDashStyle'\nimport { DefaultSizeStyle } from '../styles/TLSizeStyle'\nimport { ShapePropsType, TLBaseShape } from './TLBaseShape'\n\n/** @public */\nexport const LineShapeSplineStyle = StyleProp.defineEnum('tldraw:spline', {\n\tdefaultValue: 'line',\n\tvalues: ['cubic', 'line'],\n})\n\n/** @public */\nexport type TLLineShapeSplineStyle = T.TypeOf<typeof LineShapeSplineStyle>\n\nconst lineShapePointValidator = T.object({\n\tid: T.string,\n\tindex: T.indexKey,\n\tx: T.number,\n\ty: T.number,\n})\n\n/** @public */\nexport const lineShapeProps = {\n\tcolor: DefaultColorStyle,\n\tdash: DefaultDashStyle,\n\tsize: DefaultSizeStyle,\n\tspline: LineShapeSplineStyle,\n\tpoints: T.dict(T.string, lineShapePointValidator),\n}\n\n/** @public */\nexport type TLLineShapeProps = ShapePropsType<typeof lineShapeProps>\n\n/** @public */\nexport type TLLineShape = TLBaseShape<'line', TLLineShapeProps>\n\n/** @internal */\nexport const lineShapeVersions = {\n\tAddSnapHandles: 1,\n\tRemoveExtraHandleProps: 2,\n\tHandlesToPoints: 3,\n\tPointIndexIds: 4,\n} as const\n\n/** @internal */\nexport const lineShapeMigrations = defineMigrations({\n\tcurrentVersion: lineShapeVersions.PointIndexIds,\n\tmigrators: {\n\t\t[lineShapeVersions.AddSnapHandles]: {\n\t\t\tup: (record: any) => {\n\t\t\t\tconst handles = deepCopy(record.props.handles as Record<string, any>)\n\t\t\t\tfor (const id in handles) {\n\t\t\t\t\thandles[id].canSnap = true\n\t\t\t\t}\n\t\t\t\treturn { ...record, props: { ...record.props, handles } }\n\t\t\t},\n\t\t\tdown: (record: any) => {\n\t\t\t\tconst handles = deepCopy(record.props.handles as Record<string, any>)\n\t\t\t\tfor (const id in handles) {\n\t\t\t\t\tdelete handles[id].canSnap\n\t\t\t\t}\n\t\t\t\treturn { ...record, props: { ...record.props, handles } }\n\t\t\t},\n\t\t},\n\t\t[lineShapeVersions.RemoveExtraHandleProps]: {\n\t\t\tup: (record: any) => {\n\t\t\t\treturn {\n\t\t\t\t\t...record,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...record.props,\n\t\t\t\t\t\thandles: objectMapFromEntries(\n\t\t\t\t\t\t\tObject.values(record.props.handles).map((handle: any) => [\n\t\t\t\t\t\t\t\thandle.index,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tx: handle.x,\n\t\t\t\t\t\t\t\t\ty: handle.y,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\tdown: (record: any) => {\n\t\t\t\tconst handles = Object.entries(record.props.handles)\n\t\t\t\t\t.map(([index, handle]: any) => ({ index, ...handle }))\n\t\t\t\t\t.sort(sortByIndex)\n\n\t\t\t\treturn {\n\t\t\t\t\t...record,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...record.props,\n\t\t\t\t\t\thandles: Object.fromEntries(\n\t\t\t\t\t\t\thandles.map((handle, i) => {\n\t\t\t\t\t\t\t\tconst id =\n\t\t\t\t\t\t\t\t\ti === 0 ? 'start' : i === handles.length - 1 ? 'end' : `handle:${handle.index}`\n\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\t\t\ttype: 'vertex',\n\t\t\t\t\t\t\t\t\t\tcanBind: false,\n\t\t\t\t\t\t\t\t\t\tcanSnap: true,\n\t\t\t\t\t\t\t\t\t\tindex: handle.index,\n\t\t\t\t\t\t\t\t\t\tx: handle.x,\n\t\t\t\t\t\t\t\t\t\ty: handle.y,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t[lineShapeVersions.HandlesToPoints]: {\n\t\t\tup: (record: any) => {\n\t\t\t\tconst { handles, ...props } = record.props\n\n\t\t\t\tconst sortedHandles = (Object.entries(handles) as [IndexKey, { x: number; y: number }][])\n\t\t\t\t\t.map(([index, { x, y }]) => ({ x, y, index }))\n\t\t\t\t\t.sort(sortByIndex)\n\n\t\t\t\treturn {\n\t\t\t\t\t...record,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...props,\n\t\t\t\t\t\tpoints: sortedHandles.map(({ x, y }) => ({ x, y })),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\tdown: (record: any) => {\n\t\t\t\tconst { points, ...props } = record.props\n\t\t\t\tconst indices = getIndices(points.length)\n\n\t\t\t\treturn {\n\t\t\t\t\t...record,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...props,\n\t\t\t\t\t\thandles: Object.fromEntries(\n\t\t\t\t\t\t\tpoints.map((handle: { x: number; y: number }, i: number) => {\n\t\t\t\t\t\t\t\tconst index = indices[i]\n\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tx: handle.x,\n\t\t\t\t\t\t\t\t\t\ty: handle.y,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t[lineShapeVersions.PointIndexIds]: {\n\t\t\tup: (record: any) => {\n\t\t\t\tconst { points, ...props } = record.props\n\t\t\t\tconst indices = getIndices(points.length)\n\n\t\t\t\treturn {\n\t\t\t\t\t...record,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...props,\n\t\t\t\t\t\tpoints: Object.fromEntries(\n\t\t\t\t\t\t\tpoints.map((point: { x: number; y: number }, i: number) => {\n\t\t\t\t\t\t\t\tconst id = indices[i]\n\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tid: id,\n\t\t\t\t\t\t\t\t\t\tindex: id,\n\t\t\t\t\t\t\t\t\t\tx: point.x,\n\t\t\t\t\t\t\t\t\t\ty: point.y,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t\tdown: (record: any) => {\n\t\t\t\tconst sortedHandles = (\n\t\t\t\t\tObject.values(record.props.points) as { x: number; y: number; index: IndexKey }[]\n\t\t\t\t).sort(sortByIndex)\n\n\t\t\t\treturn {\n\t\t\t\t\t...record,\n\t\t\t\t\tprops: {\n\t\t\t\t\t\t...record.props,\n\t\t\t\t\t\tpoints: sortedHandles.map(({ x, y }) => ({ x, y })),\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n})\n"],
  "mappings": "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",
  "names": []
}
