import { defineMigrations } from "@tldraw/store";
import { deepCopy, getIndices, objectMapFromEntries, sortByIndex } from "@tldraw/utils";
import { T } from "@tldraw/validate";
import { StyleProp } from "../styles/StyleProp.mjs";
import { DefaultColorStyle } from "../styles/TLColorStyle.mjs";
import { DefaultDashStyle } from "../styles/TLDashStyle.mjs";
import { DefaultSizeStyle } from "../styles/TLSizeStyle.mjs";
const LineShapeSplineStyle = StyleProp.defineEnum("tldraw:spline", {
  defaultValue: "line",
  values: ["cubic", "line"]
});
const lineShapePointValidator = T.object({
  id: T.string,
  index: T.indexKey,
  x: T.number,
  y: T.number
});
const lineShapeProps = {
  color: DefaultColorStyle,
  dash: DefaultDashStyle,
  size: DefaultSizeStyle,
  spline: LineShapeSplineStyle,
  points: T.dict(T.string, lineShapePointValidator)
};
const lineShapeVersions = {
  AddSnapHandles: 1,
  RemoveExtraHandleProps: 2,
  HandlesToPoints: 3,
  PointIndexIds: 4
};
const lineShapeMigrations = defineMigrations({
  currentVersion: lineShapeVersions.PointIndexIds,
  migrators: {
    [lineShapeVersions.AddSnapHandles]: {
      up: (record) => {
        const handles = deepCopy(record.props.handles);
        for (const id in handles) {
          handles[id].canSnap = true;
        }
        return { ...record, props: { ...record.props, handles } };
      },
      down: (record) => {
        const handles = deepCopy(record.props.handles);
        for (const id in handles) {
          delete handles[id].canSnap;
        }
        return { ...record, props: { ...record.props, handles } };
      }
    },
    [lineShapeVersions.RemoveExtraHandleProps]: {
      up: (record) => {
        return {
          ...record,
          props: {
            ...record.props,
            handles: objectMapFromEntries(
              Object.values(record.props.handles).map((handle) => [
                handle.index,
                {
                  x: handle.x,
                  y: handle.y
                }
              ])
            )
          }
        };
      },
      down: (record) => {
        const handles = Object.entries(record.props.handles).map(([index, handle]) => ({ index, ...handle })).sort(sortByIndex);
        return {
          ...record,
          props: {
            ...record.props,
            handles: Object.fromEntries(
              handles.map((handle, i) => {
                const id = i === 0 ? "start" : i === handles.length - 1 ? "end" : `handle:${handle.index}`;
                return [
                  id,
                  {
                    id,
                    type: "vertex",
                    canBind: false,
                    canSnap: true,
                    index: handle.index,
                    x: handle.x,
                    y: handle.y
                  }
                ];
              })
            )
          }
        };
      }
    },
    [lineShapeVersions.HandlesToPoints]: {
      up: (record) => {
        const { handles, ...props } = record.props;
        const sortedHandles = Object.entries(handles).map(([index, { x, y }]) => ({ x, y, index })).sort(sortByIndex);
        return {
          ...record,
          props: {
            ...props,
            points: sortedHandles.map(({ x, y }) => ({ x, y }))
          }
        };
      },
      down: (record) => {
        const { points, ...props } = record.props;
        const indices = getIndices(points.length);
        return {
          ...record,
          props: {
            ...props,
            handles: Object.fromEntries(
              points.map((handle, i) => {
                const index = indices[i];
                return [
                  index,
                  {
                    x: handle.x,
                    y: handle.y
                  }
                ];
              })
            )
          }
        };
      }
    },
    [lineShapeVersions.PointIndexIds]: {
      up: (record) => {
        const { points, ...props } = record.props;
        const indices = getIndices(points.length);
        return {
          ...record,
          props: {
            ...props,
            points: Object.fromEntries(
              points.map((point, i) => {
                const id = indices[i];
                return [
                  id,
                  {
                    id,
                    index: id,
                    x: point.x,
                    y: point.y
                  }
                ];
              })
            )
          }
        };
      },
      down: (record) => {
        const sortedHandles = Object.values(record.props.points).sort(sortByIndex);
        return {
          ...record,
          props: {
            ...record.props,
            points: sortedHandles.map(({ x, y }) => ({ x, y }))
          }
        };
      }
    }
  }
});
export {
  LineShapeSplineStyle,
  lineShapeMigrations,
  lineShapeProps,
  lineShapeVersions
};
//# sourceMappingURL=TLLineShape.mjs.map
