"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var TLLineShape_exports = {};
__export(TLLineShape_exports, {
  LineShapeSplineStyle: () => LineShapeSplineStyle,
  lineShapeMigrations: () => lineShapeMigrations,
  lineShapeProps: () => lineShapeProps,
  lineShapeVersions: () => lineShapeVersions
});
module.exports = __toCommonJS(TLLineShape_exports);
var import_store = require("@tldraw/store");
var import_utils = require("@tldraw/utils");
var import_validate = require("@tldraw/validate");
var import_StyleProp = require("../styles/StyleProp");
var import_TLColorStyle = require("../styles/TLColorStyle");
var import_TLDashStyle = require("../styles/TLDashStyle");
var import_TLSizeStyle = require("../styles/TLSizeStyle");
const LineShapeSplineStyle = import_StyleProp.StyleProp.defineEnum("tldraw:spline", {
  defaultValue: "line",
  values: ["cubic", "line"]
});
const lineShapePointValidator = import_validate.T.object({
  id: import_validate.T.string,
  index: import_validate.T.indexKey,
  x: import_validate.T.number,
  y: import_validate.T.number
});
const lineShapeProps = {
  color: import_TLColorStyle.DefaultColorStyle,
  dash: import_TLDashStyle.DefaultDashStyle,
  size: import_TLSizeStyle.DefaultSizeStyle,
  spline: LineShapeSplineStyle,
  points: import_validate.T.dict(import_validate.T.string, lineShapePointValidator)
};
const lineShapeVersions = {
  AddSnapHandles: 1,
  RemoveExtraHandleProps: 2,
  HandlesToPoints: 3,
  PointIndexIds: 4
};
const lineShapeMigrations = (0, import_store.defineMigrations)({
  currentVersion: lineShapeVersions.PointIndexIds,
  migrators: {
    [lineShapeVersions.AddSnapHandles]: {
      up: (record) => {
        const handles = (0, import_utils.deepCopy)(record.props.handles);
        for (const id in handles) {
          handles[id].canSnap = true;
        }
        return { ...record, props: { ...record.props, handles } };
      },
      down: (record) => {
        const handles = (0, import_utils.deepCopy)(record.props.handles);
        for (const id in handles) {
          delete handles[id].canSnap;
        }
        return { ...record, props: { ...record.props, handles } };
      }
    },
    [lineShapeVersions.RemoveExtraHandleProps]: {
      up: (record) => {
        return {
          ...record,
          props: {
            ...record.props,
            handles: (0, import_utils.objectMapFromEntries)(
              Object.values(record.props.handles).map((handle) => [
                handle.index,
                {
                  x: handle.x,
                  y: handle.y
                }
              ])
            )
          }
        };
      },
      down: (record) => {
        const handles = Object.entries(record.props.handles).map(([index, handle]) => ({ index, ...handle })).sort(import_utils.sortByIndex);
        return {
          ...record,
          props: {
            ...record.props,
            handles: Object.fromEntries(
              handles.map((handle, i) => {
                const id = i === 0 ? "start" : i === handles.length - 1 ? "end" : `handle:${handle.index}`;
                return [
                  id,
                  {
                    id,
                    type: "vertex",
                    canBind: false,
                    canSnap: true,
                    index: handle.index,
                    x: handle.x,
                    y: handle.y
                  }
                ];
              })
            )
          }
        };
      }
    },
    [lineShapeVersions.HandlesToPoints]: {
      up: (record) => {
        const { handles, ...props } = record.props;
        const sortedHandles = Object.entries(handles).map(([index, { x, y }]) => ({ x, y, index })).sort(import_utils.sortByIndex);
        return {
          ...record,
          props: {
            ...props,
            points: sortedHandles.map(({ x, y }) => ({ x, y }))
          }
        };
      },
      down: (record) => {
        const { points, ...props } = record.props;
        const indices = (0, import_utils.getIndices)(points.length);
        return {
          ...record,
          props: {
            ...props,
            handles: Object.fromEntries(
              points.map((handle, i) => {
                const index = indices[i];
                return [
                  index,
                  {
                    x: handle.x,
                    y: handle.y
                  }
                ];
              })
            )
          }
        };
      }
    },
    [lineShapeVersions.PointIndexIds]: {
      up: (record) => {
        const { points, ...props } = record.props;
        const indices = (0, import_utils.getIndices)(points.length);
        return {
          ...record,
          props: {
            ...props,
            points: Object.fromEntries(
              points.map((point, i) => {
                const id = indices[i];
                return [
                  id,
                  {
                    id,
                    index: id,
                    x: point.x,
                    y: point.y
                  }
                ];
              })
            )
          }
        };
      },
      down: (record) => {
        const sortedHandles = Object.values(record.props.points).sort(import_utils.sortByIndex);
        return {
          ...record,
          props: {
            ...record.props,
            points: sortedHandles.map(({ x, y }) => ({ x, y }))
          }
        };
      }
    }
  }
});
//# sourceMappingURL=TLLineShape.js.map
