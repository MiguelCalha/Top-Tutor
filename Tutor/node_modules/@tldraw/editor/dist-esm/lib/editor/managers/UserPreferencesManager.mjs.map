{
  "version": 3,
  "sources": ["../../../../src/lib/editor/managers/UserPreferencesManager.ts"],
  "sourcesContent": ["import { computed } from '@tldraw/state'\nimport {\n\tTLUserPreferences,\n\tdefaultUserPreferences,\n\tuserPrefersDarkUI,\n} from '../../config/TLUserPreferences'\nimport { TLUser } from '../../config/createTLUser'\n\nexport class UserPreferencesManager {\n\tconstructor(\n\t\tprivate readonly user: TLUser,\n\t\tprivate readonly inferDarkMode: boolean\n\t) {}\n\n\tupdateUserPreferences = (userPreferences: Partial<TLUserPreferences>) => {\n\t\tthis.user.setUserPreferences({\n\t\t\t...this.user.userPreferences.get(),\n\t\t\t...userPreferences,\n\t\t})\n\t}\n\t@computed getUserPreferences() {\n\t\treturn {\n\t\t\tid: this.getId(),\n\t\t\tname: this.getName(),\n\t\t\tlocale: this.getLocale(),\n\t\t\tcolor: this.getColor(),\n\t\t\tanimationSpeed: this.getAnimationSpeed(),\n\t\t\tisSnapMode: this.getIsSnapMode(),\n\t\t\tisDarkMode: this.getIsDarkMode(),\n\t\t\tisWrapMode: this.getIsWrapMode(),\n\t\t}\n\t}\n\t@computed getIsDarkMode() {\n\t\treturn (\n\t\t\tthis.user.userPreferences.get().isDarkMode ??\n\t\t\t(this.inferDarkMode ? userPrefersDarkUI() : false)\n\t\t)\n\t}\n\n\t/**\n\t * The speed at which the user can scroll by dragging toward the edge of the screen.\n\t */\n\t@computed getEdgeScrollSpeed() {\n\t\treturn this.user.userPreferences.get().edgeScrollSpeed ?? defaultUserPreferences.edgeScrollSpeed\n\t}\n\n\t@computed getAnimationSpeed() {\n\t\treturn this.user.userPreferences.get().animationSpeed ?? defaultUserPreferences.animationSpeed\n\t}\n\n\t@computed getId() {\n\t\treturn this.user.userPreferences.get().id\n\t}\n\n\t@computed getName() {\n\t\treturn this.user.userPreferences.get().name ?? defaultUserPreferences.name\n\t}\n\n\t@computed getLocale() {\n\t\treturn this.user.userPreferences.get().locale ?? defaultUserPreferences.locale\n\t}\n\n\t@computed getColor() {\n\t\treturn this.user.userPreferences.get().color ?? defaultUserPreferences.color\n\t}\n\n\t@computed getIsSnapMode() {\n\t\treturn this.user.userPreferences.get().isSnapMode ?? defaultUserPreferences.isSnapMode\n\t}\n\n\t@computed getIsWrapMode() {\n\t\treturn this.user.userPreferences.get().isWrapMode ?? defaultUserPreferences.isWrapMode\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;AAAA,SAAS,gBAAgB;AACzB;AAAA,EAEC;AAAA,EACA;AAAA,OACM;AAGA,MAAM,uBAAuB;AAAA,EACnC,YACkB,MACA,eAChB;AAFgB;AACA;AAAA,EACf;AAAA,EAEH,wBAAwB,CAAC,oBAAgD;AACxE,SAAK,KAAK,mBAAmB;AAAA,MAC5B,GAAG,KAAK,KAAK,gBAAgB,IAAI;AAAA,MACjC,GAAG;AAAA,IACJ,CAAC;AAAA,EACF;AAAA,EACU,qBAAqB;AAC9B,WAAO;AAAA,MACN,IAAI,KAAK,MAAM;AAAA,MACf,MAAM,KAAK,QAAQ;AAAA,MACnB,QAAQ,KAAK,UAAU;AAAA,MACvB,OAAO,KAAK,SAAS;AAAA,MACrB,gBAAgB,KAAK,kBAAkB;AAAA,MACvC,YAAY,KAAK,cAAc;AAAA,MAC/B,YAAY,KAAK,cAAc;AAAA,MAC/B,YAAY,KAAK,cAAc;AAAA,IAChC;AAAA,EACD;AAAA,EACU,gBAAgB;AACzB,WACC,KAAK,KAAK,gBAAgB,IAAI,EAAE,eAC/B,KAAK,gBAAgB,kBAAkB,IAAI;AAAA,EAE9C;AAAA,EAKU,qBAAqB;AAC9B,WAAO,KAAK,KAAK,gBAAgB,IAAI,EAAE,mBAAmB,uBAAuB;AAAA,EAClF;AAAA,EAEU,oBAAoB;AAC7B,WAAO,KAAK,KAAK,gBAAgB,IAAI,EAAE,kBAAkB,uBAAuB;AAAA,EACjF;AAAA,EAEU,QAAQ;AACjB,WAAO,KAAK,KAAK,gBAAgB,IAAI,EAAE;AAAA,EACxC;AAAA,EAEU,UAAU;AACnB,WAAO,KAAK,KAAK,gBAAgB,IAAI,EAAE,QAAQ,uBAAuB;AAAA,EACvE;AAAA,EAEU,YAAY;AACrB,WAAO,KAAK,KAAK,gBAAgB,IAAI,EAAE,UAAU,uBAAuB;AAAA,EACzE;AAAA,EAEU,WAAW;AACpB,WAAO,KAAK,KAAK,gBAAgB,IAAI,EAAE,SAAS,uBAAuB;AAAA,EACxE;AAAA,EAEU,gBAAgB;AACzB,WAAO,KAAK,KAAK,gBAAgB,IAAI,EAAE,cAAc,uBAAuB;AAAA,EAC7E;AAAA,EAEU,gBAAgB;AACzB,WAAO,KAAK,KAAK,gBAAgB,IAAI,EAAE,cAAc,uBAAuB;AAAA,EAC7E;AACD;AArDW;AAAA,EAAT;AAAA,GAZW,uBAYF;AAYA;AAAA,EAAT;AAAA,GAxBW,uBAwBF;AAUA;AAAA,EAAT;AAAA,GAlCW,uBAkCF;AAIA;AAAA,EAAT;AAAA,GAtCW,uBAsCF;AAIA;AAAA,EAAT;AAAA,GA1CW,uBA0CF;AAIA;AAAA,EAAT;AAAA,GA9CW,uBA8CF;AAIA;AAAA,EAAT;AAAA,GAlDW,uBAkDF;AAIA;AAAA,EAAT;AAAA,GAtDW,uBAsDF;AAIA;AAAA,EAAT;AAAA,GA1DW,uBA0DF;AAIA;AAAA,EAAT;AAAA,GA9DW,uBA8DF;",
  "names": []
}
