{
  "version": 3,
  "sources": ["../../../../src/lib/editor/managers/HistoryManager.ts"],
  "sourcesContent": ["import { atom, transact } from '@tldraw/state'\nimport { devFreeze } from '@tldraw/store'\nimport { uniqueId } from '../../utils/uniqueId'\nimport { TLCommandHandler, TLCommandHistoryOptions, TLHistoryEntry } from '../types/history-types'\nimport { Stack, stack } from './Stack'\n\ntype CommandFn<Data> = (...args: any[]) =>\n\t| ({\n\t\t\tdata: Data\n\t  } & TLCommandHistoryOptions)\n\t| null\n\t| undefined\n\t| void\n\ntype ExtractData<Fn> = Fn extends CommandFn<infer Data> ? Data : never\ntype ExtractArgs<Fn> = Parameters<Extract<Fn, (...args: any[]) => any>>\n\nexport class HistoryManager<\n\tCTX extends {\n\t\temit: (name: 'change-history' | 'mark-history', ...args: any) => void\n\t},\n> {\n\t_undos = atom<Stack<TLHistoryEntry>>('HistoryManager.undos', stack()) // Updated by each action that includes and undo\n\t_redos = atom<Stack<TLHistoryEntry>>('HistoryManager.redos', stack()) // Updated when a user undoes\n\t_batchDepth = 0 // A flag for whether the user is in a batch operation\n\n\tconstructor(\n\t\tprivate readonly ctx: CTX,\n\t\tprivate readonly annotateError: (error: unknown) => void\n\t) {}\n\n\tonBatchComplete: () => void = () => void null\n\n\tprivate _commands: Record<string, TLCommandHandler<any>> = {}\n\n\tgetNumUndos() {\n\t\treturn this._undos.get().length\n\t}\n\tgetNumRedos() {\n\t\treturn this._redos.get().length\n\t}\n\tcreateCommand = <Name extends string, Constructor extends CommandFn<any>>(\n\t\tname: Name,\n\t\tconstructor: Constructor,\n\t\thandle: TLCommandHandler<ExtractData<Constructor>>\n\t) => {\n\t\tif (this._commands[name]) {\n\t\t\tthrow new Error(`Duplicate command: ${name}`)\n\t\t}\n\t\tthis._commands[name] = handle\n\n\t\tconst exec = (...args: ExtractArgs<Constructor>) => {\n\t\t\tif (!this._batchDepth) {\n\t\t\t\t// If we're not batching, run again in a batch\n\t\t\t\tthis.batch(() => exec(...args))\n\t\t\t\treturn this.ctx\n\t\t\t}\n\n\t\t\tconst result = constructor(...args)\n\n\t\t\tif (!result) {\n\t\t\t\treturn this.ctx\n\t\t\t}\n\n\t\t\tconst { data, ephemeral, squashing, preservesRedoStack } = result\n\n\t\t\tthis.ignoringUpdates((undos, redos) => {\n\t\t\t\thandle.do(data)\n\t\t\t\treturn { undos, redos }\n\t\t\t})\n\n\t\t\tif (!ephemeral) {\n\t\t\t\tconst prev = this._undos.get().head\n\t\t\t\tif (\n\t\t\t\t\tsquashing &&\n\t\t\t\t\tprev &&\n\t\t\t\t\tprev.type === 'command' &&\n\t\t\t\t\tprev.name === name &&\n\t\t\t\t\tprev.preservesRedoStack === preservesRedoStack\n\t\t\t\t) {\n\t\t\t\t\t// replace the last command with a squashed version\n\t\t\t\t\tthis._undos.update((undos) =>\n\t\t\t\t\t\tundos.tail.push({\n\t\t\t\t\t\t\t...prev,\n\t\t\t\t\t\t\tid: uniqueId(),\n\t\t\t\t\t\t\tdata: devFreeze(handle.squash!(prev.data, data)),\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\t// add to the undo stack\n\t\t\t\t\tthis._undos.update((undos) =>\n\t\t\t\t\t\tundos.push({\n\t\t\t\t\t\t\ttype: 'command',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tdata: devFreeze(data),\n\t\t\t\t\t\t\tid: uniqueId(),\n\t\t\t\t\t\t\tpreservesRedoStack: preservesRedoStack,\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tif (!result.preservesRedoStack) {\n\t\t\t\t\tthis._redos.set(stack())\n\t\t\t\t}\n\n\t\t\t\tthis.ctx.emit('change-history', { reason: 'push' })\n\t\t\t}\n\n\t\t\treturn this.ctx\n\t\t}\n\n\t\treturn exec\n\t}\n\n\tbatch = (fn: () => void) => {\n\t\ttry {\n\t\t\tthis._batchDepth++\n\t\t\tif (this._batchDepth === 1) {\n\t\t\t\ttransact(() => {\n\t\t\t\t\tconst mostRecentActionId = this._undos.get().head?.id\n\t\t\t\t\tfn()\n\t\t\t\t\tif (mostRecentActionId !== this._undos.get().head?.id) {\n\t\t\t\t\t\tthis.onBatchComplete()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tfn()\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.annotateError(error)\n\t\t\tthrow error\n\t\t} finally {\n\t\t\tthis._batchDepth--\n\t\t}\n\n\t\treturn this\n\t}\n\n\tprivate ignoringUpdates = (\n\t\tfn: (\n\t\t\tundos: Stack<TLHistoryEntry>,\n\t\t\tredos: Stack<TLHistoryEntry>\n\t\t) => { undos: Stack<TLHistoryEntry>; redos: Stack<TLHistoryEntry> }\n\t) => {\n\t\tlet undos = this._undos.get()\n\t\tlet redos = this._redos.get()\n\n\t\tthis._undos.set(stack())\n\t\tthis._redos.set(stack())\n\t\ttry {\n\t\t\t;({ undos, redos } = transact(() => fn(undos, redos)))\n\t\t} finally {\n\t\t\tthis._undos.set(undos)\n\t\t\tthis._redos.set(redos)\n\t\t}\n\t}\n\n\t// History\n\tprivate _undo = ({\n\t\tpushToRedoStack,\n\t\ttoMark = undefined,\n\t}: {\n\t\tpushToRedoStack: boolean\n\t\ttoMark?: string\n\t}) => {\n\t\tthis.ignoringUpdates((undos, redos) => {\n\t\t\tif (undos.length === 0) {\n\t\t\t\treturn { undos, redos }\n\t\t\t}\n\n\t\t\twhile (undos.head?.type === 'STOP') {\n\t\t\t\tconst mark = undos.head\n\t\t\t\tundos = undos.tail\n\t\t\t\tif (pushToRedoStack) {\n\t\t\t\t\tredos = redos.push(mark)\n\t\t\t\t}\n\t\t\t\tif (mark.id === toMark) {\n\t\t\t\t\tthis.ctx.emit(\n\t\t\t\t\t\t'change-history',\n\t\t\t\t\t\tpushToRedoStack ? { reason: 'undo' } : { reason: 'bail', markId: toMark }\n\t\t\t\t\t)\n\t\t\t\t\treturn { undos, redos }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (undos.length === 0) {\n\t\t\t\tthis.ctx.emit(\n\t\t\t\t\t'change-history',\n\t\t\t\t\tpushToRedoStack ? { reason: 'undo' } : { reason: 'bail', markId: toMark }\n\t\t\t\t)\n\t\t\t\treturn { undos, redos }\n\t\t\t}\n\n\t\t\twhile (undos.head) {\n\t\t\t\tconst command = undos.head\n\t\t\t\tundos = undos.tail\n\n\t\t\t\tif (pushToRedoStack) {\n\t\t\t\t\tredos = redos.push(command)\n\t\t\t\t}\n\n\t\t\t\tif (command.type === 'STOP') {\n\t\t\t\t\tif (command.onUndo && (!toMark || command.id === toMark)) {\n\t\t\t\t\t\tthis.ctx.emit(\n\t\t\t\t\t\t\t'change-history',\n\t\t\t\t\t\t\tpushToRedoStack ? { reason: 'undo' } : { reason: 'bail', markId: toMark }\n\t\t\t\t\t\t)\n\t\t\t\t\t\treturn { undos, redos }\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst handler = this._commands[command.name]\n\t\t\t\t\thandler.undo(command.data)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.ctx.emit(\n\t\t\t\t'change-history',\n\t\t\t\tpushToRedoStack ? { reason: 'undo' } : { reason: 'bail', markId: toMark }\n\t\t\t)\n\t\t\treturn { undos, redos }\n\t\t})\n\n\t\treturn this\n\t}\n\n\tundo = () => {\n\t\tthis._undo({ pushToRedoStack: true })\n\n\t\treturn this\n\t}\n\n\tredo = () => {\n\t\tthis.ignoringUpdates((undos, redos) => {\n\t\t\tif (redos.length === 0) {\n\t\t\t\treturn { undos, redos }\n\t\t\t}\n\n\t\t\twhile (redos.head?.type === 'STOP') {\n\t\t\t\tundos = undos.push(redos.head)\n\t\t\t\tredos = redos.tail\n\t\t\t}\n\n\t\t\tif (redos.length === 0) {\n\t\t\t\tthis.ctx.emit('change-history', { reason: 'redo' })\n\t\t\t\treturn { undos, redos }\n\t\t\t}\n\n\t\t\twhile (redos.head) {\n\t\t\t\tconst command = redos.head\n\t\t\t\tundos = undos.push(redos.head)\n\t\t\t\tredos = redos.tail\n\n\t\t\t\tif (command.type === 'STOP') {\n\t\t\t\t\tif (command.onRedo) {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst handler = this._commands[command.name]\n\t\t\t\t\tif (handler.redo) {\n\t\t\t\t\t\thandler.redo(command.data)\n\t\t\t\t\t} else {\n\t\t\t\t\t\thandler.do(command.data)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.ctx.emit('change-history', { reason: 'redo' })\n\t\t\treturn { undos, redos }\n\t\t})\n\n\t\treturn this\n\t}\n\n\tbail = () => {\n\t\tthis._undo({ pushToRedoStack: false })\n\n\t\treturn this\n\t}\n\n\tbailToMark = (id: string) => {\n\t\tthis._undo({ pushToRedoStack: false, toMark: id })\n\n\t\treturn this\n\t}\n\n\tmark = (id = uniqueId(), onUndo = true, onRedo = true) => {\n\t\tconst mostRecent = this._undos.get().head\n\t\t// dedupe marks, why not\n\t\tif (mostRecent && mostRecent.type === 'STOP') {\n\t\t\tif (mostRecent.id === id && mostRecent.onUndo === onUndo && mostRecent.onRedo === onRedo) {\n\t\t\t\treturn mostRecent.id\n\t\t\t}\n\t\t}\n\n\t\tthis._undos.update((undos) => undos.push({ type: 'STOP', id, onUndo, onRedo }))\n\n\t\tthis.ctx.emit('mark-history', { id })\n\n\t\treturn id\n\t}\n\n\tclear() {\n\t\tthis._undos.set(stack())\n\t\tthis._redos.set(stack())\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
