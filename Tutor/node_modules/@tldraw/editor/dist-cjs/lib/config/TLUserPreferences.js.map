{
  "version": 3,
  "sources": ["../../../src/lib/config/TLUserPreferences.ts"],
  "sourcesContent": ["import { atom } from '@tldraw/state'\nimport { defineMigrations, migrate } from '@tldraw/store'\nimport { getDefaultTranslationLocale } from '@tldraw/tlschema'\nimport { T } from '@tldraw/validate'\nimport { uniqueId } from '../utils/uniqueId'\n\nconst USER_DATA_KEY = 'TLDRAW_USER_DATA_v3'\n\n/**\n * A user of tldraw\n *\n * @public\n */\nexport interface TLUserPreferences {\n\tid: string\n\tname?: string | null\n\tlocale?: string | null\n\tcolor?: string | null\n\tanimationSpeed?: number | null\n\tedgeScrollSpeed?: number | null\n\tisDarkMode?: boolean | null\n\tisSnapMode?: boolean | null\n\tisWrapMode?: boolean | null\n}\n\ninterface UserDataSnapshot {\n\tversion: number\n\tuser: TLUserPreferences\n}\n\ninterface UserChangeBroadcastMessage {\n\ttype: typeof broadcastEventKey\n\torigin: string\n\tdata: UserDataSnapshot\n}\n\nconst userTypeValidator: T.Validator<TLUserPreferences> = T.object<TLUserPreferences>({\n\tid: T.string,\n\tname: T.string.nullable().optional(),\n\tlocale: T.string.nullable().optional(),\n\tcolor: T.string.nullable().optional(),\n\tisDarkMode: T.boolean.nullable().optional(),\n\tanimationSpeed: T.number.nullable().optional(),\n\tedgeScrollSpeed: T.number.nullable().optional(),\n\tisSnapMode: T.boolean.nullable().optional(),\n\tisWrapMode: T.boolean.nullable().optional(),\n})\n\nconst Versions = {\n\tAddAnimationSpeed: 1,\n\tAddIsSnapMode: 2,\n\tMakeFieldsNullable: 3,\n\tAddEdgeScrollSpeed: 4,\n\tAddExcalidrawSelectMode: 5,\n} as const\n\nconst userMigrations = defineMigrations({\n\tcurrentVersion: Versions.AddExcalidrawSelectMode,\n\tmigrators: {\n\t\t[Versions.AddAnimationSpeed]: {\n\t\t\tup: (user) => {\n\t\t\t\treturn {\n\t\t\t\t\t...user,\n\t\t\t\t\tanimationSpeed: 1,\n\t\t\t\t}\n\t\t\t},\n\t\t\tdown: ({ animationSpeed: _, ...user }) => {\n\t\t\t\treturn user\n\t\t\t},\n\t\t},\n\t\t[Versions.AddIsSnapMode]: {\n\t\t\tup: (user: TLUserPreferences) => {\n\t\t\t\treturn { ...user, isSnapMode: false }\n\t\t\t},\n\t\t\tdown: ({ isSnapMode: _, ...user }: TLUserPreferences) => {\n\t\t\t\treturn user\n\t\t\t},\n\t\t},\n\t\t[Versions.MakeFieldsNullable]: {\n\t\t\tup: (user: TLUserPreferences) => {\n\t\t\t\treturn user\n\t\t\t},\n\t\t\tdown: (user: TLUserPreferences) => {\n\t\t\t\treturn {\n\t\t\t\t\tid: user.id,\n\t\t\t\t\tname: user.name ?? defaultUserPreferences.name,\n\t\t\t\t\tlocale: user.locale ?? defaultUserPreferences.locale,\n\t\t\t\t\tcolor: user.color ?? defaultUserPreferences.color,\n\t\t\t\t\tanimationSpeed: user.animationSpeed ?? defaultUserPreferences.animationSpeed,\n\t\t\t\t\tisDarkMode: user.isDarkMode ?? defaultUserPreferences.isDarkMode,\n\t\t\t\t\tisSnapMode: user.isSnapMode ?? defaultUserPreferences.isSnapMode,\n\t\t\t\t\tisWrapMode: user.isWrapMode ?? defaultUserPreferences.isWrapMode,\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\t[Versions.AddEdgeScrollSpeed]: {\n\t\t\tup: (user: TLUserPreferences) => {\n\t\t\t\treturn {\n\t\t\t\t\t...user,\n\t\t\t\t\tedgeScrollSpeed: 1,\n\t\t\t\t}\n\t\t\t},\n\t\t\tdown: ({ edgeScrollSpeed: _, ...user }: TLUserPreferences) => {\n\t\t\t\treturn user\n\t\t\t},\n\t\t},\n\t\t[Versions.AddExcalidrawSelectMode]: {\n\t\t\tup: (user: TLUserPreferences) => {\n\t\t\t\treturn { ...user, isWrapMode: false }\n\t\t\t},\n\t\t\tdown: ({ isWrapMode: _, ...user }: TLUserPreferences) => {\n\t\t\t\treturn user\n\t\t\t},\n\t\t},\n\t},\n})\n\n/** @internal */\nexport const USER_COLORS = [\n\t'#FF802B',\n\t'#EC5E41',\n\t'#F2555A',\n\t'#F04F88',\n\t'#E34BA9',\n\t'#BD54C6',\n\t'#9D5BD2',\n\t'#7B66DC',\n\t'#02B1CC',\n\t'#11B3A3',\n\t'#39B178',\n\t'#55B467',\n] as const\n\nfunction getRandomColor() {\n\treturn USER_COLORS[Math.floor(Math.random() * USER_COLORS.length)]\n}\n\n/** @internal */\nexport function userPrefersDarkUI() {\n\tif (typeof window === 'undefined') {\n\t\treturn false\n\t}\n\treturn window.matchMedia?.('(prefers-color-scheme: dark)')?.matches ?? false\n}\n\n/** @internal */\nexport function userPrefersReducedMotion() {\n\tif (typeof window === 'undefined') {\n\t\treturn false\n\t}\n\treturn window.matchMedia?.('(prefers-reduced-motion: reduce)')?.matches ?? false\n}\n\n/** @public */\nexport const defaultUserPreferences = Object.freeze({\n\tname: 'New User',\n\tlocale: getDefaultTranslationLocale(),\n\tcolor: getRandomColor(),\n\tisDarkMode: false,\n\tedgeScrollSpeed: 1,\n\tanimationSpeed: userPrefersReducedMotion() ? 0 : 1,\n\tisSnapMode: false,\n\tisWrapMode: false,\n}) satisfies Readonly<Omit<TLUserPreferences, 'id'>>\n\n/** @public */\nexport function getFreshUserPreferences(): TLUserPreferences {\n\treturn {\n\t\tid: uniqueId(),\n\t}\n}\n\nfunction migrateUserPreferences(userData: unknown) {\n\tif (userData === null || typeof userData !== 'object') {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\tif (!('version' in userData) || !('user' in userData) || typeof userData.version !== 'number') {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\tconst migrationResult = migrate<TLUserPreferences>({\n\t\tvalue: userData.user,\n\t\tfromVersion: userData.version,\n\t\ttoVersion: userMigrations.currentVersion ?? 0,\n\t\tmigrations: userMigrations,\n\t})\n\n\tif (migrationResult.type === 'error') {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\ttry {\n\t\tuserTypeValidator.validate(migrationResult.value)\n\t} catch (e) {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\treturn migrationResult.value\n}\n\nfunction loadUserPreferences(): TLUserPreferences {\n\tconst userData =\n\t\ttypeof window === 'undefined'\n\t\t\t? null\n\t\t\t: ((JSON.parse(window?.localStorage?.getItem(USER_DATA_KEY) || 'null') ??\n\t\t\t\t\tnull) as null | UserDataSnapshot)\n\n\treturn migrateUserPreferences(userData)\n}\n\nconst globalUserPreferences = atom<TLUserPreferences | null>('globalUserData', null)\n\nfunction storeUserPreferences() {\n\tif (typeof window !== 'undefined' && window.localStorage) {\n\t\twindow.localStorage.setItem(\n\t\t\tUSER_DATA_KEY,\n\t\t\tJSON.stringify({\n\t\t\t\tversion: userMigrations.currentVersion,\n\t\t\t\tuser: globalUserPreferences.get(),\n\t\t\t})\n\t\t)\n\t}\n}\n\n/** @public */\nexport function setUserPreferences(user: TLUserPreferences) {\n\tuserTypeValidator.validate(user)\n\tglobalUserPreferences.set(user)\n\tstoreUserPreferences()\n\tbroadcastUserPreferencesChange()\n}\n\nconst isTest = typeof process !== 'undefined' && process.env.NODE_ENV === 'test'\n\nconst channel =\n\ttypeof BroadcastChannel !== 'undefined' && !isTest\n\t\t? new BroadcastChannel('tldraw-user-sync')\n\t\t: null\n\nchannel?.addEventListener('message', (e) => {\n\tconst data = e.data as undefined | UserChangeBroadcastMessage\n\tif (data?.type === broadcastEventKey && data?.origin !== getBroadcastOrigin()) {\n\t\tglobalUserPreferences.set(migrateUserPreferences(data.data))\n\t}\n})\n\nlet _broadcastOrigin = null as null | string\nfunction getBroadcastOrigin() {\n\tif (_broadcastOrigin === null) {\n\t\t_broadcastOrigin = uniqueId()\n\t}\n\treturn _broadcastOrigin\n}\nconst broadcastEventKey = 'tldraw-user-preferences-change' as const\n\nfunction broadcastUserPreferencesChange() {\n\tchannel?.postMessage({\n\t\ttype: broadcastEventKey,\n\t\torigin: getBroadcastOrigin(),\n\t\tdata: {\n\t\t\tuser: getUserPreferences(),\n\t\t\tversion: userMigrations.currentVersion,\n\t\t},\n\t} satisfies UserChangeBroadcastMessage)\n}\n\n/** @public */\nexport function getUserPreferences(): TLUserPreferences {\n\tlet prefs = globalUserPreferences.get()\n\tif (!prefs) {\n\t\tprefs = loadUserPreferences()\n\t\tglobalUserPreferences.set(prefs)\n\t}\n\treturn prefs\n}\n"],
  "mappings": "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",
  "names": []
}
