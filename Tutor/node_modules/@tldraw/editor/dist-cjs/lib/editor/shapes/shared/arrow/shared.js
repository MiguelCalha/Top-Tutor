"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var shared_exports = {};
__export(shared_exports, {
  BOUND_ARROW_OFFSET: () => BOUND_ARROW_OFFSET,
  LABEL_TO_ARROW_PADDING: () => LABEL_TO_ARROW_PADDING,
  MIN_ARROW_LENGTH: () => MIN_ARROW_LENGTH,
  STROKE_SIZES: () => STROKE_SIZES,
  WAY_TOO_BIG_ARROW_BEND_FACTOR: () => WAY_TOO_BIG_ARROW_BEND_FACTOR,
  getArrowTerminalsInArrowSpace: () => getArrowTerminalsInArrowSpace,
  getBoundShapeInfoForTerminal: () => getBoundShapeInfoForTerminal,
  getBoundShapeRelationships: () => getBoundShapeRelationships,
  getIsArrowStraight: () => getIsArrowStraight
});
module.exports = __toCommonJS(shared_exports);
var import_Mat = require("../../../../primitives/Mat");
var import_Vec = require("../../../../primitives/Vec");
var import_Group2d = require("../../../../primitives/geometry/Group2d");
function getIsArrowStraight(shape) {
  return Math.abs(shape.props.bend) < 8;
}
function getBoundShapeInfoForTerminal(editor, terminal) {
  if (terminal.type === "point") {
    return;
  }
  const shape = editor.getShape(terminal.boundShapeId);
  const transform = editor.getShapePageTransform(shape);
  const geometry = editor.getShapeGeometry(shape);
  const outline = geometry instanceof import_Group2d.Group2d ? geometry.children[0].vertices : geometry.vertices;
  return {
    shape,
    transform,
    isClosed: geometry.isClosed,
    isExact: terminal.isExact,
    didIntersect: false,
    outline
  };
}
function getArrowTerminalInArrowSpace(editor, arrowPageTransform, terminal, forceImprecise) {
  if (terminal.type === "point") {
    return import_Vec.Vec.From(terminal);
  }
  const boundShape = editor.getShape(terminal.boundShapeId);
  if (!boundShape) {
    return new import_Vec.Vec(0, 0);
  } else {
    const { point, size } = editor.getShapeGeometry(boundShape).bounds;
    const shapePoint = import_Vec.Vec.Add(
      point,
      import_Vec.Vec.MulV(
        // if the parent is the bound shape, then it's ALWAYS precise
        terminal.isPrecise || forceImprecise ? terminal.normalizedAnchor : { x: 0.5, y: 0.5 },
        size
      )
    );
    const pagePoint = import_Mat.Mat.applyToPoint(editor.getShapePageTransform(boundShape), shapePoint);
    const arrowPoint = import_Mat.Mat.applyToPoint(import_Mat.Mat.Inverse(arrowPageTransform), pagePoint);
    return arrowPoint;
  }
}
function getArrowTerminalsInArrowSpace(editor, shape) {
  const arrowPageTransform = editor.getShapePageTransform(shape);
  let startBoundShapeId;
  let endBoundShapeId;
  if (shape.props.start.type === "binding" && shape.props.end.type === "binding") {
    startBoundShapeId = shape.props.start.boundShapeId;
    endBoundShapeId = shape.props.end.boundShapeId;
  }
  const boundShapeRelationships = getBoundShapeRelationships(
    editor,
    startBoundShapeId,
    endBoundShapeId
  );
  const start = getArrowTerminalInArrowSpace(
    editor,
    arrowPageTransform,
    shape.props.start,
    boundShapeRelationships === "double-bound" || boundShapeRelationships === "start-contains-end"
  );
  const end = getArrowTerminalInArrowSpace(
    editor,
    arrowPageTransform,
    shape.props.end,
    boundShapeRelationships === "double-bound" || boundShapeRelationships === "end-contains-start"
  );
  return { start, end };
}
const MIN_ARROW_LENGTH = 10;
const BOUND_ARROW_OFFSET = 10;
const LABEL_TO_ARROW_PADDING = 20;
const WAY_TOO_BIG_ARROW_BEND_FACTOR = 10;
const STROKE_SIZES = {
  s: 2,
  m: 3.5,
  l: 5,
  xl: 10
};
function getBoundShapeRelationships(editor, startShapeId, endShapeId) {
  if (!startShapeId || !endShapeId)
    return "safe";
  if (startShapeId === endShapeId)
    return "double-bound";
  const startBounds = editor.getShapePageBounds(startShapeId);
  const endBounds = editor.getShapePageBounds(endShapeId);
  if (startBounds && endBounds) {
    if (startBounds.contains(endBounds))
      return "start-contains-end";
    if (endBounds.contains(startBounds))
      return "end-contains-start";
  }
  return "safe";
}
//# sourceMappingURL=shared.js.map
