"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var edgeScrolling_exports = {};
__export(edgeScrolling_exports, {
  moveCameraWhenCloseToEdge: () => moveCameraWhenCloseToEdge
});
module.exports = __toCommonJS(edgeScrolling_exports);
var import_constants = require("../constants");
function getEdgeProximityFactor(position, dimension, isCoarse, insetStart, insetEnd) {
  const dist = import_constants.EDGE_SCROLL_DISTANCE;
  const pw = isCoarse ? import_constants.COARSE_POINTER_WIDTH : 0;
  const pMin = position - pw;
  const pMax = position + pw;
  const min = insetStart ? 0 : dist;
  const max = insetEnd ? dimension : dimension - dist;
  if (pMin < min) {
    return Math.min(1, (min - pMin) / dist);
  } else if (pMax > max) {
    return -Math.min(1, (pMax - max) / dist);
  }
  return 0;
}
function moveCameraWhenCloseToEdge(editor) {
  if (!editor.inputs.isDragging || editor.inputs.isPanning || !editor.getInstanceState().canMoveCamera)
    return;
  const {
    inputs: {
      currentScreenPoint: { x, y }
    }
  } = editor;
  const zoomLevel = editor.getZoomLevel();
  const screenBounds = editor.getViewportScreenBounds();
  const screenSizeFactorX = screenBounds.w < 1e3 ? 0.612 : 1;
  const screenSizeFactorY = screenBounds.h < 1e3 ? 0.612 : 1;
  const {
    isCoarsePointer,
    insets: [t, r, b, l]
  } = editor.getInstanceState();
  const proximityFactorX = getEdgeProximityFactor(x, screenBounds.w, isCoarsePointer, l, r);
  const proximityFactorY = getEdgeProximityFactor(y, screenBounds.h, isCoarsePointer, t, b);
  if (proximityFactorX === 0 && proximityFactorY === 0)
    return;
  const pxSpeed = editor.user.getEdgeScrollSpeed() * import_constants.EDGE_SCROLL_SPEED;
  const scrollDeltaX = pxSpeed * proximityFactorX * screenSizeFactorX / zoomLevel;
  const scrollDeltaY = pxSpeed * proximityFactorY * screenSizeFactorY / zoomLevel;
  const camera = editor.getCamera();
  editor.setCamera({
    x: camera.x + scrollDeltaX,
    y: camera.y + scrollDeltaY
  });
}
//# sourceMappingURL=edgeScrolling.js.map
