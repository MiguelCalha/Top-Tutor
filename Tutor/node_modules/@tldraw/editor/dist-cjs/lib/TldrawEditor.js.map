{
  "version": 3,
  "sources": ["../../src/lib/TldrawEditor.tsx"],
  "sourcesContent": ["import { SerializedStore, Store, StoreSnapshot } from '@tldraw/store'\nimport { TLRecord, TLStore } from '@tldraw/tlschema'\nimport { Expand, Required, annotateError } from '@tldraw/utils'\nimport React, {\n\tmemo,\n\tuseCallback,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseState,\n\tuseSyncExternalStore,\n} from 'react'\n\nimport classNames from 'classnames'\nimport { OptionalErrorBoundary } from './components/ErrorBoundary'\nimport { DefaultErrorFallback } from './components/default-components/DefaultErrorFallback'\nimport { TLUser, createTLUser } from './config/createTLUser'\nimport { TLAnyShapeUtilConstructor } from './config/defaultShapes'\nimport { Editor } from './editor/Editor'\nimport { TLStateNodeConstructor } from './editor/tools/StateNode'\nimport { ContainerProvider, useContainer } from './hooks/useContainer'\nimport { useCursor } from './hooks/useCursor'\nimport { useDarkMode } from './hooks/useDarkMode'\nimport { EditorContext, useEditor } from './hooks/useEditor'\nimport {\n\tEditorComponentsProvider,\n\tTLEditorComponents,\n\tuseEditorComponents,\n} from './hooks/useEditorComponents'\nimport { useEvent } from './hooks/useEvent'\nimport { useFocusEvents } from './hooks/useFocusEvents'\nimport { useForceUpdate } from './hooks/useForceUpdate'\nimport { useLocalStore } from './hooks/useLocalStore'\nimport { useSafariFocusOutFix } from './hooks/useSafariFocusOutFix'\nimport { useZoomCss } from './hooks/useZoomCss'\nimport { stopEventPropagation } from './utils/dom'\nimport { TLStoreWithStatus } from './utils/sync/StoreWithStatus'\n\n/**\n * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components.\n *\n * @public\n **/\nexport type TldrawEditorProps = Expand<\n\tTldrawEditorBaseProps &\n\t\t(\n\t\t\t| {\n\t\t\t\t\tstore: TLStore | TLStoreWithStatus\n\t\t\t  }\n\t\t\t| {\n\t\t\t\t\tstore?: undefined\n\t\t\t\t\tsnapshot?: StoreSnapshot<TLRecord>\n\t\t\t\t\tinitialData?: SerializedStore<TLRecord>\n\t\t\t\t\tpersistenceKey?: string\n\t\t\t\t\tsessionId?: string\n\t\t\t\t\tdefaultName?: string\n\t\t\t  }\n\t\t)\n>\n\n/**\n * Base props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components.\n *\n * @public\n */\nexport interface TldrawEditorBaseProps {\n\t/**\n\t * The component's children.\n\t */\n\tchildren?: any\n\n\t/**\n\t * An array of shape utils to use in the editor.\n\t */\n\tshapeUtils?: readonly TLAnyShapeUtilConstructor[]\n\n\t/**\n\t * An array of tools to add to the editor's state chart.\n\t */\n\ttools?: readonly TLStateNodeConstructor[]\n\n\t/**\n\t * Whether to automatically focus the editor when it mounts.\n\t */\n\tautoFocus?: boolean\n\n\t/**\n\t * Overrides for the editor's components, such as handles, collaborator cursors, etc.\n\t */\n\tcomponents?: TLEditorComponents\n\n\t/**\n\t * Called when the editor has mounted.\n\t */\n\tonMount?: TLOnMountHandler\n\n\t/**\n\t * The editor's initial state (usually the id of the first active tool).\n\t */\n\tinitialState?: string\n\n\t/**\n\t * A classname to pass to the editor's container.\n\t */\n\tclassName?: string\n\n\t/**\n\t * The user interacting with the editor.\n\t */\n\tuser?: TLUser\n\n\t/**\n\t * Whether to infer dark mode from the user's OS. Defaults to false.\n\t */\n\tinferDarkMode?: boolean\n}\n\n/**\n * Called when the editor has mounted.\n * @example\n * ```ts\n * <Tldraw onMount={(editor) => editor.selectAll()} />\n * ```\n * @param editor - The editor instance.\n *\n * @public\n */\nexport type TLOnMountHandler = (editor: Editor) => (() => void | undefined) | undefined | void\n\ndeclare global {\n\tinterface Window {\n\t\ttldrawReady: boolean\n\t}\n}\n\nconst EMPTY_SHAPE_UTILS_ARRAY = [] as const\nconst EMPTY_TOOLS_ARRAY = [] as const\n\n/** @public */\nexport const TldrawEditor = memo(function TldrawEditor({\n\tstore,\n\tcomponents,\n\tclassName,\n\tuser: _user,\n\t...rest\n}: TldrawEditorProps) {\n\tconst [container, setContainer] = React.useState<HTMLDivElement | null>(null)\n\tconst user = useMemo(() => _user ?? createTLUser(), [_user])\n\n\tconst ErrorFallback =\n\t\tcomponents?.ErrorFallback === undefined ? DefaultErrorFallback : components?.ErrorFallback\n\n\t// apply defaults. if you're using the bare @tldraw/editor package, we\n\t// default these to the \"tldraw zero\" configuration. We have different\n\t// defaults applied in tldraw.\n\tconst withDefaults = {\n\t\t...rest,\n\t\tshapeUtils: rest.shapeUtils ?? EMPTY_SHAPE_UTILS_ARRAY,\n\t\ttools: rest.tools ?? EMPTY_TOOLS_ARRAY,\n\t\tcomponents,\n\t}\n\n\treturn (\n\t\t<div\n\t\t\tref={setContainer}\n\t\t\tdraggable={false}\n\t\t\tclassName={classNames('tl-container tl-theme__light', className)}\n\t\t\tonPointerDown={stopEventPropagation}\n\t\t\ttabIndex={-1}\n\t\t>\n\t\t\t<OptionalErrorBoundary\n\t\t\t\tfallback={ErrorFallback}\n\t\t\t\tonError={(error) => annotateError(error, { tags: { origin: 'react.tldraw-before-app' } })}\n\t\t\t>\n\t\t\t\t{container && (\n\t\t\t\t\t<ContainerProvider container={container}>\n\t\t\t\t\t\t<EditorComponentsProvider overrides={components}>\n\t\t\t\t\t\t\t{store ? (\n\t\t\t\t\t\t\t\tstore instanceof Store ? (\n\t\t\t\t\t\t\t\t\t// Store is ready to go, whether externally synced or not\n\t\t\t\t\t\t\t\t\t<TldrawEditorWithReadyStore {...withDefaults} store={store} user={user} />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t// Store is a synced store, so handle syncing stages internally\n\t\t\t\t\t\t\t\t\t<TldrawEditorWithLoadingStore {...withDefaults} store={store} user={user} />\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t// We have no store (it's undefined) so create one and possibly sync it\n\t\t\t\t\t\t\t\t<TldrawEditorWithOwnStore {...withDefaults} store={store} user={user} />\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</EditorComponentsProvider>\n\t\t\t\t\t</ContainerProvider>\n\t\t\t\t)}\n\t\t\t</OptionalErrorBoundary>\n\t\t</div>\n\t)\n})\n\nfunction TldrawEditorWithOwnStore(\n\tprops: Required<TldrawEditorProps & { store: undefined; user: TLUser }, 'shapeUtils' | 'tools'>\n) {\n\tconst { defaultName, snapshot, initialData, shapeUtils, persistenceKey, sessionId, user } = props\n\n\tconst syncedStore = useLocalStore({\n\t\tshapeUtils,\n\t\tinitialData,\n\t\tpersistenceKey,\n\t\tsessionId,\n\t\tdefaultName,\n\t\tsnapshot,\n\t})\n\n\treturn <TldrawEditorWithLoadingStore {...props} store={syncedStore} user={user} />\n}\n\nconst TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({\n\tstore,\n\tuser,\n\t...rest\n}: Required<\n\tTldrawEditorProps & { store: TLStoreWithStatus; user: TLUser },\n\t'shapeUtils' | 'tools'\n>) {\n\tconst container = useContainer()\n\n\tuseLayoutEffect(() => {\n\t\tif (user.userPreferences.get().isDarkMode) {\n\t\t\tcontainer.classList.remove('tl-theme__light')\n\t\t\tcontainer.classList.add('tl-theme__dark')\n\t\t}\n\t}, [container, user])\n\n\tconst { LoadingScreen } = useEditorComponents()\n\n\tswitch (store.status) {\n\t\tcase 'error': {\n\t\t\t// for error handling, we fall back to the default error boundary.\n\t\t\t// if users want to handle this error differently, they can render\n\t\t\t// their own error screen before the TldrawEditor component\n\t\t\tthrow store.error\n\t\t}\n\t\tcase 'loading': {\n\t\t\treturn LoadingScreen ? <LoadingScreen /> : null\n\t\t}\n\t\tcase 'not-synced': {\n\t\t\tbreak\n\t\t}\n\t\tcase 'synced-local': {\n\t\t\tbreak\n\t\t}\n\t\tcase 'synced-remote': {\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn <TldrawEditorWithReadyStore {...rest} store={store.store} user={user} />\n})\n\nfunction TldrawEditorWithReadyStore({\n\tonMount,\n\tchildren,\n\tstore,\n\ttools,\n\tshapeUtils,\n\tuser,\n\tinitialState,\n\tautoFocus = true,\n\tinferDarkMode,\n}: Required<\n\tTldrawEditorProps & {\n\t\tstore: TLStore\n\t\tuser: TLUser\n\t},\n\t'shapeUtils' | 'tools'\n>) {\n\tconst { ErrorFallback } = useEditorComponents()\n\tconst container = useContainer()\n\tconst [editor, setEditor] = useState<Editor | null>(null)\n\n\tuseLayoutEffect(() => {\n\t\tconst editor = new Editor({\n\t\t\tstore,\n\t\t\tshapeUtils,\n\t\t\ttools,\n\t\t\tgetContainer: () => container,\n\t\t\tuser,\n\t\t\tinitialState,\n\t\t\tinferDarkMode,\n\t\t})\n\t\tsetEditor(editor)\n\n\t\treturn () => {\n\t\t\teditor.dispose()\n\t\t}\n\t}, [container, shapeUtils, tools, store, user, initialState, inferDarkMode])\n\n\tconst crashingError = useSyncExternalStore(\n\t\tuseCallback(\n\t\t\t(onStoreChange) => {\n\t\t\t\tif (editor) {\n\t\t\t\t\teditor.on('crash', onStoreChange)\n\t\t\t\t\treturn () => editor.off('crash', onStoreChange)\n\t\t\t\t}\n\t\t\t\treturn () => {\n\t\t\t\t\t// noop\n\t\t\t\t}\n\t\t\t},\n\t\t\t[editor]\n\t\t),\n\t\t() => editor?.getCrashingError() ?? null\n\t)\n\n\tconst { Canvas } = useEditorComponents()\n\n\tif (!editor) {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t// the top-level tldraw component also renders an error boundary almost\n\t\t// identical to this one. the reason we have two is because this one has\n\t\t// access to `App`, which means that here we can enrich errors with data\n\t\t// from app for reporting, and also still attempt to render the user's\n\t\t// document in the event of an error to reassure them that their work is\n\t\t// not lost.\n\t\t<OptionalErrorBoundary\n\t\t\tfallback={ErrorFallback as any}\n\t\t\tonError={(error) =>\n\t\t\t\teditor.annotateError(error, { origin: 'react.tldraw', willCrashApp: true })\n\t\t\t}\n\t\t>\n\t\t\t{crashingError ? (\n\t\t\t\t<Crash crashingError={crashingError} />\n\t\t\t) : (\n\t\t\t\t<EditorContext.Provider value={editor}>\n\t\t\t\t\t<Layout autoFocus={autoFocus} onMount={onMount}>\n\t\t\t\t\t\t{children ?? (Canvas ? <Canvas /> : null)}\n\t\t\t\t\t</Layout>\n\t\t\t\t</EditorContext.Provider>\n\t\t\t)}\n\t\t</OptionalErrorBoundary>\n\t)\n}\n\nfunction Layout({\n\tchildren,\n\tonMount,\n\tautoFocus,\n}: {\n\tchildren: any\n\tautoFocus: boolean\n\tonMount?: TLOnMountHandler\n}) {\n\tuseZoomCss()\n\tuseCursor()\n\tuseDarkMode()\n\tuseSafariFocusOutFix()\n\tuseForceUpdate()\n\tuseFocusEvents(autoFocus)\n\tuseOnMount(onMount)\n\n\treturn <>{children}</>\n}\n\nfunction Crash({ crashingError }: { crashingError: unknown }): null {\n\tthrow crashingError\n}\n\n/** @public */\nexport function LoadingScreen({ children }: { children: any }) {\n\treturn <div className=\"tl-loading\">{children}</div>\n}\n\n/** @public */\nexport function ErrorScreen({ children }: { children: any }) {\n\treturn <div className=\"tl-loading\">{children}</div>\n}\n\nfunction useOnMount(onMount?: TLOnMountHandler) {\n\tconst editor = useEditor()\n\n\tconst onMountEvent = useEvent((editor: Editor) => {\n\t\tconst teardown = onMount?.(editor)\n\t\teditor.emit('mount')\n\t\twindow.tldrawReady = true\n\t\treturn teardown\n\t})\n\n\tReact.useLayoutEffect(() => {\n\t\tif (editor) return onMountEvent?.(editor)\n\t}, [editor, onMountEvent])\n}\n"],
  "mappings": "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",
  "names": ["TldrawEditor", "React", "classNames", "LoadingScreen", "editor"]
}
