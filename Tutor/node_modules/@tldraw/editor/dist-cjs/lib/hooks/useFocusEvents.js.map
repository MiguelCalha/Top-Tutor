{
  "version": 3,
  "sources": ["../../../src/lib/hooks/useFocusEvents.ts"],
  "sourcesContent": ["import { useLayoutEffect } from 'react'\nimport { useContainer } from './useContainer'\nimport { useEditor } from './useEditor'\n\n/** @internal */\nexport function useFocusEvents(autoFocus: boolean) {\n\tconst editor = useEditor()\n\tconst container = useContainer()\n\tuseLayoutEffect(() => {\n\t\tif (autoFocus) {\n\t\t\t// When autoFocus is true, update the editor state to be focused\n\t\t\t// unless it's already focused\n\t\t\tif (!editor.getInstanceState().isFocused) {\n\t\t\t\teditor.updateInstanceState({ isFocused: true })\n\t\t\t}\n\n\t\t\t// Note: Focus is also handled by the side effect manager in tldraw.\n\t\t\t// Importantly, if a user manually sets isFocused to true (or if it\n\t\t\t// changes for any reason from false to true), the side effect manager\n\t\t\t// in tldraw will also take care of the focus. However, it may be that\n\t\t\t// on first mount the editor already has isFocused: true in the model,\n\t\t\t// so we also need to focus it here just to be sure.\n\t\t\teditor.getContainer().focus()\n\t\t} else {\n\t\t\t// When autoFocus is false, update the editor state to be not focused\n\t\t\t// unless it's already not focused\n\t\t\tif (editor.getInstanceState().isFocused) {\n\t\t\t\teditor.updateInstanceState({ isFocused: false })\n\t\t\t}\n\t\t}\n\t}, [editor, container, autoFocus])\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAgC;AAChC,0BAA6B;AAC7B,uBAA0B;AAGnB,SAAS,eAAe,WAAoB;AAClD,QAAM,aAAS,4BAAU;AACzB,QAAM,gBAAY,kCAAa;AAC/B,oCAAgB,MAAM;AACrB,QAAI,WAAW;AAGd,UAAI,CAAC,OAAO,iBAAiB,EAAE,WAAW;AACzC,eAAO,oBAAoB,EAAE,WAAW,KAAK,CAAC;AAAA,MAC/C;AAQA,aAAO,aAAa,EAAE,MAAM;AAAA,IAC7B,OAAO;AAGN,UAAI,OAAO,iBAAiB,EAAE,WAAW;AACxC,eAAO,oBAAoB,EAAE,WAAW,MAAM,CAAC;AAAA,MAChD;AAAA,IACD;AAAA,EACD,GAAG,CAAC,QAAQ,WAAW,SAAS,CAAC;AAClC;",
  "names": []
}
