{
  "version": 3,
  "sources": ["../../src/lib/file.ts"],
  "sourcesContent": ["/**\n * Helpers for files\n *\n * @public\n */\nexport class FileHelpers {\n\t/**\n\t * @param dataURL - The file as a string.\n\t * @internal\n\t *\n\t * from https://stackoverflow.com/a/53817185\n\t */\n\tstatic async base64ToFile(dataURL: string) {\n\t\treturn fetch(dataURL).then(function (result) {\n\t\t\treturn result.arrayBuffer()\n\t\t})\n\t}\n\n\t/**\n\t * Convert a file to base64.\n\t *\n\t * @example\n\t *\n\t * ```ts\n\t * const A = fileToBase64('./test.png')\n\t * ```\n\t *\n\t * @param value - The file as a blob.\n\t * @public\n\t */\n\tstatic async fileToBase64(file: Blob): Promise<string> {\n\t\treturn await new Promise((resolve, reject) => {\n\t\t\tif (file) {\n\t\t\t\tconst reader = new FileReader()\n\t\t\t\treader.readAsDataURL(file)\n\t\t\t\treader.onload = () => resolve(reader.result as string)\n\t\t\t\treader.onerror = (error) => reject(error)\n\t\t\t\treader.onabort = (error) => reject(error)\n\t\t\t}\n\t\t})\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOxB,aAAa,aAAa,SAAiB;AAC1C,WAAO,MAAM,OAAO,EAAE,KAAK,SAAU,QAAQ;AAC5C,aAAO,OAAO,YAAY;AAAA,IAC3B,CAAC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,aAAa,aAAa,MAA6B;AACtD,WAAO,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC7C,UAAI,MAAM;AACT,cAAM,SAAS,IAAI,WAAW;AAC9B,eAAO,cAAc,IAAI;AACzB,eAAO,SAAS,MAAM,QAAQ,OAAO,MAAgB;AACrD,eAAO,UAAU,CAAC,UAAU,OAAO,KAAK;AACxC,eAAO,UAAU,CAAC,UAAU,OAAO,KAAK;AAAA,MACzC;AAAA,IACD,CAAC;AAAA,EACF;AACD;",
  "names": []
}
