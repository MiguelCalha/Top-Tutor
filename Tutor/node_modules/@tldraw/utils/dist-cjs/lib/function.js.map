{
  "version": 3,
  "sources": ["../../src/lib/function.ts"],
  "sourcesContent": ["/**\n * Throttle a function.\n *\n * @example\n *\n * ```ts\n * const A = throttle(myFunction, 1000)\n * ```\n *\n * @public\n * @see source - https://github.com/bameyrick/throttle-typescript\n */\nexport function throttle<T extends (...args: any) => any>(\n\tfunc: T,\n\tlimit: number\n): (...args: Parameters<T>) => ReturnType<T> {\n\tlet inThrottle: boolean\n\tlet lastResult: ReturnType<T>\n\treturn function (this: any, ...args: any[]): ReturnType<T> {\n\t\tif (!inThrottle) {\n\t\t\tinThrottle = true\n\t\t\tsetTimeout(() => (inThrottle = false), limit)\n\t\t\tlastResult = func(...args)\n\t\t}\n\t\treturn lastResult\n\t}\n}\n\n/**\n * When a function is wrapped in `omitFromStackTrace`, if it throws an error the stack trace won't\n * include the function itself or any stack frames above it. Useful for assertion-style function\n * where the error will ideally originate from the call-site rather than within the implementation\n * of the assert fn.\n *\n * Only works in platforms that support `Error.captureStackTrace` (ie v8).\n *\n * @internal\n */\nexport function omitFromStackTrace<Args extends Array<unknown>, Return>(\n\tfn: (...args: Args) => Return\n): (...args: Args) => Return {\n\tconst wrappedFn = (...args: Args) => {\n\t\ttry {\n\t\t\treturn fn(...args)\n\t\t} catch (error) {\n\t\t\tif (error instanceof Error && Error.captureStackTrace) {\n\t\t\t\tError.captureStackTrace(error, wrappedFn)\n\t\t\t}\n\t\t\tthrow error\n\t\t}\n\t}\n\n\treturn wrappedFn\n}\n\n/**\n * Does nothing, but it's really really good at it.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport function noop(): void {}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,SAAS,SACf,MACA,OAC4C;AAC5C,MAAI;AACJ,MAAI;AACJ,SAAO,YAAwB,MAA4B;AAC1D,QAAI,CAAC,YAAY;AAChB,mBAAa;AACb,iBAAW,MAAO,aAAa,OAAQ,KAAK;AAC5C,mBAAa,KAAK,GAAG,IAAI;AAAA,IAC1B;AACA,WAAO;AAAA,EACR;AACD;AAYO,SAAS,mBACf,IAC4B;AAC5B,QAAM,YAAY,IAAI,SAAe;AACpC,QAAI;AACH,aAAO,GAAG,GAAG,IAAI;AAAA,IAClB,SAAS,OAAO;AACf,UAAI,iBAAiB,SAAS,MAAM,mBAAmB;AACtD,cAAM,kBAAkB,OAAO,SAAS;AAAA,MACzC;AACA,YAAM;AAAA,IACP;AAAA,EACD;AAEA,SAAO;AACR;AAOO,SAAS,OAAa;AAAC;",
  "names": []
}
