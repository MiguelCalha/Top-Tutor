import { jsx } from "react/jsx-runtime";
import {
  Editor,
  ErrorScreen,
  LoadingScreen,
  useShallowArrayIdentity,
  useTLStore
} from "@tldraw/editor";
import { memo, useLayoutEffect, useMemo, useState } from "react";
import { defaultShapeUtils } from "./defaultShapeUtils.mjs";
import { usePreloadAssets } from "./ui/hooks/usePreloadAssets.mjs";
import { getSvgAsImage, getSvgAsString } from "./utils/export/export.mjs";
import { useDefaultEditorAssetsWithOverrides } from "./utils/static-assets/assetUrls.mjs";
const TldrawImage = memo(function TldrawImage2(props) {
  const [url, setUrl] = useState(null);
  const [container, setContainer] = useState(null);
  const shapeUtils = useShallowArrayIdentity(props.shapeUtils ?? []);
  const shapeUtilsWithDefaults = useMemo(() => [...defaultShapeUtils, ...shapeUtils], [shapeUtils]);
  const store = useTLStore({ snapshot: props.snapshot, shapeUtils: shapeUtilsWithDefaults });
  const assets = useDefaultEditorAssetsWithOverrides();
  const { done: preloadingComplete, error: preloadingError } = usePreloadAssets(assets);
  const {
    pageId,
    bounds,
    scale,
    background,
    padding,
    darkMode,
    preserveAspectRatio,
    format = "svg"
  } = props;
  useLayoutEffect(() => {
    if (!container)
      return;
    if (!store)
      return;
    if (!preloadingComplete)
      return;
    let isCancelled = false;
    const tempElm = document.createElement("div");
    container.appendChild(tempElm);
    container.classList.add("tl-container", "tl-theme__light");
    const editor = new Editor({
      store,
      shapeUtils: shapeUtilsWithDefaults ?? [],
      tools: [],
      getContainer: () => tempElm
    });
    if (pageId)
      editor.setCurrentPage(pageId);
    const shapeIds = editor.getCurrentPageShapeIds();
    async function setSvg() {
      const svg = await editor.getSvg([...shapeIds], {
        bounds,
        scale,
        background,
        padding,
        darkMode,
        preserveAspectRatio
      });
      if (svg && !isCancelled) {
        if (format === "svg") {
          const string = await getSvgAsString(svg);
          if (!isCancelled) {
            const blob = new Blob([string], { type: "image/svg+xml" });
            const url2 = URL.createObjectURL(blob);
            setUrl(url2);
          }
        } else if (format === "png") {
          const blob = await getSvgAsImage(svg, editor.environment.isSafari, {
            type: format,
            quality: 1,
            scale: 2
          });
          if (blob && !isCancelled) {
            const url2 = URL.createObjectURL(blob);
            setUrl(url2);
          }
        }
      }
      editor.dispose();
    }
    setSvg();
    return () => {
      isCancelled = true;
    };
  }, [
    format,
    container,
    store,
    shapeUtilsWithDefaults,
    pageId,
    bounds,
    scale,
    background,
    padding,
    darkMode,
    preserveAspectRatio,
    preloadingComplete,
    preloadingError
  ]);
  if (preloadingError) {
    return /* @__PURE__ */ jsx(ErrorScreen, { children: "Could not load assets." });
  }
  if (!preloadingComplete) {
    return /* @__PURE__ */ jsx(LoadingScreen, { children: "Loading assets..." });
  }
  return /* @__PURE__ */ jsx("div", { ref: setContainer, style: { position: "relative", width: "100%", height: "100%" }, children: url && /* @__PURE__ */ jsx("img", { src: url, style: { width: "100%", height: "100%" } }) });
});
export {
  TldrawImage
};
//# sourceMappingURL=TldrawImage.mjs.map
