{
  "version": 3,
  "sources": ["../../../../../src/lib/shapes/geo/components/DashStyleCloud.tsx"],
  "sourcesContent": ["import {\n\tTLDefaultColorTheme,\n\tTLGeoShape,\n\tTLShapeId,\n\tVec,\n\tcanonicalizeRotation,\n} from '@tldraw/editor'\nimport * as React from 'react'\nimport {\n\tShapeFill,\n\tgetShapeFillSvg,\n\tgetSvgWithShapeFill,\n\tuseDefaultColorTheme,\n} from '../../shared/ShapeFill'\nimport { getPerfectDashProps } from '../../shared/getPerfectDashProps'\nimport { cloudSvgPath, getCloudArcs } from '../cloudOutline'\n\nexport const DashStyleCloud = React.memo(function DashStylePolygon({\n\tdash,\n\tfill,\n\tcolor,\n\tstrokeWidth,\n\tw,\n\th,\n\tid,\n\tsize,\n}: Pick<TLGeoShape['props'], 'dash' | 'fill' | 'color' | 'w' | 'h' | 'size'> & {\n\tstrokeWidth: number\n\tid: TLShapeId\n}) {\n\tconst theme = useDefaultColorTheme()\n\tconst innerPath = cloudSvgPath(w, h, id, size)\n\tconst arcs = getCloudArcs(w, h, id, size)\n\n\treturn (\n\t\t<>\n\t\t\t<ShapeFill theme={theme} d={innerPath} fill={fill} color={color} />\n\t\t\t<g strokeWidth={strokeWidth} stroke={theme[color].solid} fill=\"none\" pointerEvents=\"all\">\n\t\t\t\t{arcs.map(({ leftPoint, rightPoint, center, radius }, i) => {\n\t\t\t\t\tconst arcLength = center\n\t\t\t\t\t\t? radius *\n\t\t\t\t\t\t\tcanonicalizeRotation(\n\t\t\t\t\t\t\t\tcanonicalizeRotation(Vec.Angle(center, rightPoint)) -\n\t\t\t\t\t\t\t\t\tcanonicalizeRotation(Vec.Angle(center, leftPoint))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t: Vec.Dist(leftPoint, rightPoint)\n\n\t\t\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\t\t\t\t\tarcLength,\n\t\t\t\t\t\tstrokeWidth,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: dash,\n\t\t\t\t\t\t\tstart: 'outset',\n\t\t\t\t\t\t\tend: 'outset',\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\td={\n\t\t\t\t\t\t\t\tcenter\n\t\t\t\t\t\t\t\t\t? `M${leftPoint.x},${leftPoint.y}A${radius},${radius},0,0,1,${rightPoint.x},${rightPoint.y}`\n\t\t\t\t\t\t\t\t\t: `M${leftPoint.x},${leftPoint.y}L${rightPoint.x},${rightPoint.y}`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</g>\n\t\t</>\n\t)\n})\n\nexport function DashStyleCloudSvg({\n\tdash,\n\tfill,\n\tcolor,\n\ttheme,\n\tstrokeWidth,\n\tw,\n\th,\n\tid,\n\tsize,\n}: Pick<TLGeoShape['props'], 'dash' | 'fill' | 'color' | 'w' | 'h' | 'size'> & {\n\tid: TLShapeId\n\tstrokeWidth: number\n\ttheme: TLDefaultColorTheme\n}) {\n\tconst innerPath = cloudSvgPath(w, h, id, size)\n\tconst arcs = getCloudArcs(w, h, id, size)\n\n\tconst strokeElement = document.createElementNS('http://www.w3.org/2000/svg', 'g')\n\tstrokeElement.setAttribute('stroke-width', strokeWidth.toString())\n\tstrokeElement.setAttribute('stroke', theme[color].solid)\n\tstrokeElement.setAttribute('fill', 'none')\n\n\tfor (const { leftPoint, rightPoint, center, radius } of arcs) {\n\t\tconst arcLength = center\n\t\t\t? radius *\n\t\t\t\tcanonicalizeRotation(\n\t\t\t\t\tcanonicalizeRotation(Vec.Angle(center, rightPoint)) -\n\t\t\t\t\t\tcanonicalizeRotation(Vec.Angle(center, leftPoint))\n\t\t\t\t)\n\t\t\t: Vec.Dist(leftPoint, rightPoint)\n\n\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(arcLength, strokeWidth, {\n\t\t\tstyle: dash,\n\t\t\tstart: 'outset',\n\t\t\tend: 'outset',\n\t\t})\n\n\t\tconst path = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\t\tpath.setAttribute(\n\t\t\t'd',\n\t\t\tcenter\n\t\t\t\t? `M${leftPoint.x},${leftPoint.y}A${radius},${radius},0,0,1,${rightPoint.x},${rightPoint.y}`\n\t\t\t\t: `M${leftPoint.x},${leftPoint.y}L${rightPoint.x},${rightPoint.y}`\n\t\t)\n\t\tpath.setAttribute('stroke-dasharray', strokeDasharray.toString())\n\t\tpath.setAttribute('stroke-dashoffset', strokeDashoffset.toString())\n\t\tstrokeElement.appendChild(path)\n\t}\n\n\t// Get the fill element, if any\n\tconst fillElement = getShapeFillSvg({\n\t\td: innerPath,\n\t\tfill,\n\t\tcolor,\n\t\ttheme,\n\t})\n\n\treturn getSvgWithShapeFill(strokeElement, fillElement)\n}\n"],
  "mappings": "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",
  "names": []
}
