{
  "version": 3,
  "sources": ["../../../../../src/lib/shapes/geo/components/SolidStyleEllipse.tsx"],
  "sourcesContent": ["import { TLDefaultColorTheme, TLGeoShape } from '@tldraw/editor'\nimport * as React from 'react'\nimport {\n\tShapeFill,\n\tgetShapeFillSvg,\n\tgetSvgWithShapeFill,\n\tuseDefaultColorTheme,\n} from '../../shared/ShapeFill'\n\nexport const SolidStyleEllipse = React.memo(function SolidStyleEllipse({\n\tw,\n\th,\n\tstrokeWidth: sw,\n\tfill,\n\tcolor,\n}: Pick<TLGeoShape['props'], 'w' | 'h' | 'fill' | 'color'> & { strokeWidth: number }) {\n\tconst theme = useDefaultColorTheme()\n\tconst cx = w / 2\n\tconst cy = h / 2\n\tconst rx = Math.max(0, cx)\n\tconst ry = Math.max(0, cy)\n\n\tconst d = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`\n\n\treturn (\n\t\t<>\n\t\t\t<ShapeFill d={d} color={color} fill={fill} theme={theme} />\n\t\t\t<path d={d} stroke={theme[color].solid} strokeWidth={sw} fill=\"none\" />\n\t\t</>\n\t)\n})\n\nexport function SolidStyleEllipseSvg({\n\tw,\n\th,\n\tstrokeWidth: sw,\n\tfill,\n\tcolor,\n\ttheme,\n}: Pick<TLGeoShape['props'], 'w' | 'h' | 'fill' | 'color'> & {\n\tstrokeWidth: number\n\ttheme: TLDefaultColorTheme\n}) {\n\tconst cx = w / 2\n\tconst cy = h / 2\n\tconst rx = Math.max(0, cx)\n\tconst ry = Math.max(0, cy)\n\n\tconst d = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`\n\n\tconst strokeElement = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\tstrokeElement.setAttribute('d', d)\n\tstrokeElement.setAttribute('stroke-width', sw.toString())\n\tstrokeElement.setAttribute('width', w.toString())\n\tstrokeElement.setAttribute('height', h.toString())\n\tstrokeElement.setAttribute('fill', 'none')\n\tstrokeElement.setAttribute('stroke', theme[color].solid)\n\n\t// Get the fill element, if any\n\tconst fillElement = getShapeFillSvg({\n\t\td,\n\t\tfill,\n\t\tcolor,\n\t\ttheme,\n\t})\n\n\treturn getSvgWithShapeFill(strokeElement, fillElement)\n}\n"],
  "mappings": "AAyBE,mBACC,KADD;AAxBF,YAAY,WAAW;AACvB;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAEA,MAAM,oBAAoB,MAAM,KAAK,SAASA,mBAAkB;AAAA,EACtE;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb;AAAA,EACA;AACD,GAAsF;AACrF,QAAM,QAAQ,qBAAqB;AACnC,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,KAAK,IAAI,GAAG,EAAE;AACzB,QAAM,KAAK,KAAK,IAAI,GAAG,EAAE;AAEzB,QAAM,IAAI,IAAI,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,WAAW,KAAK,CAAC;AAEtF,SACC,iCACC;AAAA,wBAAC,aAAU,GAAM,OAAc,MAAY,OAAc;AAAA,IACzD,oBAAC,UAAK,GAAM,QAAQ,MAAM,KAAK,EAAE,OAAO,aAAa,IAAI,MAAK,QAAO;AAAA,KACtE;AAEF,CAAC;AAEM,SAAS,qBAAqB;AAAA,EACpC;AAAA,EACA;AAAA,EACA,aAAa;AAAA,EACb;AAAA,EACA;AAAA,EACA;AACD,GAGG;AACF,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,IAAI;AACf,QAAM,KAAK,KAAK,IAAI,GAAG,EAAE;AACzB,QAAM,KAAK,KAAK,IAAI,GAAG,EAAE;AAEzB,QAAM,IAAI,IAAI,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,KAAK,CAAC,MAAM,EAAE,IAAI,EAAE,WAAW,KAAK,CAAC;AAEtF,QAAM,gBAAgB,SAAS,gBAAgB,8BAA8B,MAAM;AACnF,gBAAc,aAAa,KAAK,CAAC;AACjC,gBAAc,aAAa,gBAAgB,GAAG,SAAS,CAAC;AACxD,gBAAc,aAAa,SAAS,EAAE,SAAS,CAAC;AAChD,gBAAc,aAAa,UAAU,EAAE,SAAS,CAAC;AACjD,gBAAc,aAAa,QAAQ,MAAM;AACzC,gBAAc,aAAa,UAAU,MAAM,KAAK,EAAE,KAAK;AAGvD,QAAM,cAAc,gBAAgB;AAAA,IACnC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD,CAAC;AAED,SAAO,oBAAoB,eAAe,WAAW;AACtD;",
  "names": ["SolidStyleEllipse"]
}
