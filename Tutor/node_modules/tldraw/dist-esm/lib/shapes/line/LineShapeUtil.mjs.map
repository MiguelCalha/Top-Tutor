{
  "version": 3,
  "sources": ["../../../../src/lib/shapes/line/LineShapeUtil.tsx"],
  "sourcesContent": ["/* eslint-disable react-hooks/rules-of-hooks */\nimport {\n\tCubicSpline2d,\n\tGroup2d,\n\tHandleSnapGeometry,\n\tPolyline2d,\n\tSVGContainer,\n\tShapeUtil,\n\tSvgExportContext,\n\tTLHandle,\n\tTLLineShape,\n\tTLOnHandleDragHandler,\n\tTLOnResizeHandler,\n\tVec,\n\tWeakMapCache,\n\tgetDefaultColorTheme,\n\tgetIndexBetween,\n\tgetIndices,\n\tlineShapeMigrations,\n\tlineShapeProps,\n\tmapObjectMapValues,\n\tsortByIndex,\n} from '@tldraw/editor'\n\nimport { ShapeFill, useDefaultColorTheme } from '../shared/ShapeFill'\nimport { STROKE_SIZES } from '../shared/default-shape-constants'\nimport { getPerfectDashProps } from '../shared/getPerfectDashProps'\nimport { getDrawLinePathData } from '../shared/polygon-helpers'\nimport { getLineDrawPath, getLineIndicatorPath } from './components/getLinePath'\nimport {\n\tgetSvgPathForBezierCurve,\n\tgetSvgPathForCubicSpline,\n\tgetSvgPathForEdge,\n\tgetSvgPathForLineGeometry,\n} from './components/svg'\n\nconst handlesCache = new WeakMapCache<TLLineShape['props'], TLHandle[]>()\n\n/** @public */\nexport class LineShapeUtil extends ShapeUtil<TLLineShape> {\n\tstatic override type = 'line' as const\n\tstatic override props = lineShapeProps\n\tstatic override migrations = lineShapeMigrations\n\n\toverride hideResizeHandles = () => true\n\toverride hideRotateHandle = () => true\n\toverride hideSelectionBoundsFg = () => true\n\toverride hideSelectionBoundsBg = () => true\n\n\toverride getDefaultProps(): TLLineShape['props'] {\n\t\tconst [start, end] = getIndices(2)\n\t\treturn {\n\t\t\tdash: 'draw',\n\t\t\tsize: 'm',\n\t\t\tcolor: 'black',\n\t\t\tspline: 'line',\n\t\t\tpoints: {\n\t\t\t\t[start]: { id: start, index: start, x: 0, y: 0 },\n\t\t\t\t[end]: { id: end, index: end, x: 0.1, y: 0.1 },\n\t\t\t},\n\t\t}\n\t}\n\n\tgetGeometry(shape: TLLineShape) {\n\t\t// todo: should we have min size?\n\t\treturn getGeometryForLineShape(shape)\n\t}\n\n\toverride getHandles(shape: TLLineShape) {\n\t\treturn handlesCache.get(shape.props, () => {\n\t\t\tconst spline = getGeometryForLineShape(shape)\n\n\t\t\tconst points = linePointsToArray(shape)\n\t\t\tconst results: TLHandle[] = points.map((point) => ({\n\t\t\t\t...point,\n\t\t\t\tid: point.index,\n\t\t\t\ttype: 'vertex',\n\t\t\t\tcanSnap: true,\n\t\t\t}))\n\n\t\t\tfor (let i = 0; i < points.length - 1; i++) {\n\t\t\t\tconst index = getIndexBetween(points[i].index, points[i + 1].index)\n\t\t\t\tconst segment = spline.segments[i]\n\t\t\t\tconst point = segment.midPoint()\n\t\t\t\tresults.push({\n\t\t\t\t\tid: index,\n\t\t\t\t\ttype: 'create',\n\t\t\t\t\tindex,\n\t\t\t\t\tx: point.x,\n\t\t\t\t\ty: point.y,\n\t\t\t\t\tcanSnap: true,\n\t\t\t\t})\n\t\t\t}\n\n\t\t\treturn results.sort(sortByIndex)\n\t\t})\n\t}\n\n\t//   Events\n\n\toverride onResize: TLOnResizeHandler<TLLineShape> = (shape, info) => {\n\t\tconst { scaleX, scaleY } = info\n\n\t\treturn {\n\t\t\tprops: {\n\t\t\t\tpoints: mapObjectMapValues(shape.props.points, (_, { id, index, x, y }) => ({\n\t\t\t\t\tid,\n\t\t\t\t\tindex,\n\t\t\t\t\tx: x * scaleX,\n\t\t\t\t\ty: y * scaleY,\n\t\t\t\t})),\n\t\t\t},\n\t\t}\n\t}\n\n\toverride onHandleDrag: TLOnHandleDragHandler<TLLineShape> = (shape, { handle }) => {\n\t\t// we should only ever be dragging vertex handles\n\t\tif (handle.type !== 'vertex') return\n\n\t\treturn {\n\t\t\t...shape,\n\t\t\tprops: {\n\t\t\t\t...shape.props,\n\t\t\t\tpoints: {\n\t\t\t\t\t...shape.props.points,\n\t\t\t\t\t[handle.id]: { id: handle.id, index: handle.index, x: handle.x, y: handle.y },\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\t}\n\n\tcomponent(shape: TLLineShape) {\n\t\tconst theme = useDefaultColorTheme()\n\t\tconst spline = getGeometryForLineShape(shape)\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\n\t\tconst { dash, color } = shape.props\n\n\t\t// Line style lines\n\t\tif (shape.props.spline === 'line') {\n\t\t\tif (dash === 'solid') {\n\t\t\t\tconst outline = spline.points\n\t\t\t\tconst pathData = 'M' + outline[0] + 'L' + outline.slice(1)\n\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={pathData} fill={'none'} color={color} theme={theme} />\n\t\t\t\t\t\t<path d={pathData} stroke={theme[color].solid} strokeWidth={strokeWidth} fill=\"none\" />\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'dashed' || dash === 'dotted') {\n\t\t\t\tconst outline = spline.points\n\t\t\t\tconst pathData = 'M' + outline[0] + 'L' + outline.slice(1)\n\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={pathData} fill={'none'} color={color} theme={theme} />\n\t\t\t\t\t\t<g stroke={theme[color].solid} strokeWidth={strokeWidth}>\n\t\t\t\t\t\t\t{spline.segments.map((segment, i) => {\n\t\t\t\t\t\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\t\t\t\t\t\t\t\tsegment.length,\n\t\t\t\t\t\t\t\t\tstrokeWidth,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tstyle: dash,\n\t\t\t\t\t\t\t\t\t\tstart: i > 0 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t\tend: i < spline.segments.length - 1 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\t\t\t\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\t\t\t\t\t\t\td={getSvgPathForEdge(segment as any, true)}\n\t\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'draw') {\n\t\t\t\tconst outline = spline.points\n\t\t\t\tconst [innerPathData, outerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth)\n\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={innerPathData} fill={'none'} color={color} theme={theme} />\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td={outerPathData}\n\t\t\t\t\t\t\tstroke={theme[color].solid}\n\t\t\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\t// Cubic style spline\n\t\tif (shape.props.spline === 'cubic') {\n\t\t\tconst splinePath = getSvgPathForLineGeometry(spline)\n\t\t\tif (dash === 'solid') {\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={splinePath} fill={'none'} color={color} theme={theme} />\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\t\t\tstroke={theme[color].solid}\n\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\td={splinePath}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'dashed' || dash === 'dotted') {\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={splinePath} fill={'none'} color={color} theme={theme} />\n\t\t\t\t\t\t<g stroke={theme[color].solid} strokeWidth={strokeWidth}>\n\t\t\t\t\t\t\t{spline.segments.map((segment, i) => {\n\t\t\t\t\t\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\t\t\t\t\t\t\t\tsegment.length,\n\t\t\t\t\t\t\t\t\tstrokeWidth,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tstyle: dash,\n\t\t\t\t\t\t\t\t\t\tstart: i > 0 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t\tend: i < spline.segments.length - 1 ? 'outset' : 'none',\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<path\n\t\t\t\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\t\t\t\tstrokeDasharray={strokeDasharray}\n\t\t\t\t\t\t\t\t\t\tstrokeDashoffset={strokeDashoffset}\n\t\t\t\t\t\t\t\t\t\td={getSvgPathForBezierCurve(segment as any, true)}\n\t\t\t\t\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</g>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tif (dash === 'draw') {\n\t\t\t\treturn (\n\t\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t\t<ShapeFill d={splinePath} fill={'none'} color={color} theme={theme} />\n\t\t\t\t\t\t<path\n\t\t\t\t\t\t\td={getLineDrawPath(shape, spline, strokeWidth)}\n\t\t\t\t\t\t\tstrokeWidth={1}\n\t\t\t\t\t\t\tstroke={theme[color].solid}\n\t\t\t\t\t\t\tfill={theme[color].solid}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SVGContainer>\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\tindicator(shape: TLLineShape) {\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\t\tconst spline = getGeometryForLineShape(shape)\n\t\tconst { dash } = shape.props\n\n\t\tlet path: string\n\n\t\tif (shape.props.spline === 'line') {\n\t\t\tconst outline = spline.points\n\t\t\tif (dash === 'solid' || dash === 'dotted' || dash === 'dashed') {\n\t\t\t\tpath = 'M' + outline[0] + 'L' + outline.slice(1)\n\t\t\t} else {\n\t\t\t\tconst [innerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth)\n\t\t\t\tpath = innerPathData\n\t\t\t}\n\t\t} else {\n\t\t\tpath = getLineIndicatorPath(shape, spline, strokeWidth)\n\t\t}\n\n\t\treturn <path d={path} />\n\t}\n\n\toverride toSvg(shape: TLLineShape, ctx: SvgExportContext) {\n\t\tconst theme = getDefaultColorTheme({ isDarkMode: ctx.isDarkMode })\n\t\tconst color = theme[shape.props.color].solid\n\t\tconst spline = getGeometryForLineShape(shape)\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\n\t\tswitch (shape.props.dash) {\n\t\t\tcase 'draw': {\n\t\t\t\tlet pathData: string\n\t\t\t\tif (spline instanceof CubicSpline2d) {\n\t\t\t\t\tpathData = getLineDrawPath(shape, spline, strokeWidth)\n\t\t\t\t} else {\n\t\t\t\t\tconst [_, outerPathData] = getDrawLinePathData(shape.id, spline.points, strokeWidth)\n\t\t\t\t\tpathData = outerPathData\n\t\t\t\t}\n\n\t\t\t\tconst p = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\t\t\t\tp.setAttribute('stroke-width', strokeWidth + 'px')\n\t\t\t\tp.setAttribute('stroke', color)\n\t\t\t\tp.setAttribute('fill', 'none')\n\t\t\t\tp.setAttribute('d', pathData)\n\n\t\t\t\treturn p\n\t\t\t}\n\t\t\tcase 'solid': {\n\t\t\t\tlet pathData: string\n\n\t\t\t\tif (spline instanceof CubicSpline2d) {\n\t\t\t\t\tpathData = getSvgPathForCubicSpline(spline, false)\n\t\t\t\t} else {\n\t\t\t\t\tconst outline = spline.points\n\t\t\t\t\tpathData = 'M' + outline[0] + 'L' + outline.slice(1)\n\t\t\t\t}\n\n\t\t\t\tconst p = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\t\t\t\tp.setAttribute('stroke-width', strokeWidth + 'px')\n\t\t\t\tp.setAttribute('stroke', color)\n\t\t\t\tp.setAttribute('fill', 'none')\n\t\t\t\tp.setAttribute('d', pathData)\n\n\t\t\t\treturn p\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tconst { segments } = spline\n\n\t\t\t\tconst g = document.createElementNS('http://www.w3.org/2000/svg', 'g')\n\t\t\t\tg.setAttribute('stroke', color)\n\t\t\t\tg.setAttribute('stroke-width', strokeWidth.toString())\n\n\t\t\t\tconst fn = spline instanceof CubicSpline2d ? getSvgPathForBezierCurve : getSvgPathForEdge\n\n\t\t\t\tsegments.forEach((segment, i) => {\n\t\t\t\t\tconst path = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\t\t\t\t\tconst { strokeDasharray, strokeDashoffset } = getPerfectDashProps(\n\t\t\t\t\t\tsegment.length,\n\t\t\t\t\t\tstrokeWidth,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyle: shape.props.dash,\n\t\t\t\t\t\t\tstart: i > 0 ? 'outset' : 'none',\n\t\t\t\t\t\t\tend: i < segments.length - 1 ? 'outset' : 'none',\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\n\t\t\t\t\tpath.setAttribute('stroke-dasharray', strokeDasharray.toString())\n\t\t\t\t\tpath.setAttribute('stroke-dashoffset', strokeDashoffset.toString())\n\t\t\t\t\tpath.setAttribute('d', fn(segment as any, true))\n\t\t\t\t\tpath.setAttribute('fill', 'none')\n\t\t\t\t\tg.appendChild(path)\n\t\t\t\t})\n\n\t\t\t\treturn g\n\t\t\t}\n\t\t}\n\t}\n\n\toverride getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {\n\t\tconst points = linePointsToArray(shape)\n\t\treturn {\n\t\t\tpoints,\n\t\t\tgetSelfSnapPoints: (handle) => {\n\t\t\t\tconst index = this.getHandles(shape)\n\t\t\t\t\t.filter((h) => h.type === 'vertex')\n\t\t\t\t\t.findIndex((h) => h.id === handle.id)!\n\n\t\t\t\t// We want to skip the current and adjacent handles\n\t\t\t\treturn points.filter((_, i) => Math.abs(i - index) > 1).map(Vec.From)\n\t\t\t},\n\t\t\tgetSelfSnapOutline: (handle) => {\n\t\t\t\t// We want to skip the segments that include the handle, so\n\t\t\t\t// find the index of the handle that shares the same index property\n\t\t\t\t// as the initial dragging handle; this catches a quirk of create handles\n\t\t\t\tconst index = this.getHandles(shape)\n\t\t\t\t\t.filter((h) => h.type === 'vertex')\n\t\t\t\t\t.findIndex((h) => h.id === handle.id)!\n\n\t\t\t\t// Get all the outline segments from the shape that don't include the handle\n\t\t\t\tconst segments = getGeometryForLineShape(shape).segments.filter(\n\t\t\t\t\t(_, i) => i !== index - 1 && i !== index\n\t\t\t\t)\n\n\t\t\t\tif (!segments.length) return null\n\t\t\t\treturn new Group2d({ children: segments })\n\t\t\t},\n\t\t}\n\t}\n}\n\nfunction linePointsToArray(shape: TLLineShape) {\n\treturn Object.values(shape.props.points).sort(sortByIndex)\n}\n\n/** @public */\nexport function getGeometryForLineShape(shape: TLLineShape): CubicSpline2d | Polyline2d {\n\tconst points = linePointsToArray(shape).map(Vec.From)\n\n\tswitch (shape.props.spline) {\n\t\tcase 'cubic': {\n\t\t\treturn new CubicSpline2d({ points })\n\t\t}\n\t\tcase 'line': {\n\t\t\treturn new Polyline2d({ points })\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
