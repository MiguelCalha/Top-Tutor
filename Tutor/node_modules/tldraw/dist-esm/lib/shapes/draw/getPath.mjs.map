{
  "version": 3,
  "sources": ["../../../../src/lib/shapes/draw/getPath.ts"],
  "sourcesContent": ["import {\n\tEASINGS,\n\tPI,\n\tSIN,\n\tTLDefaultDashStyle,\n\tTLDrawShape,\n\tTLDrawShapeSegment,\n\tVec,\n} from '@tldraw/editor'\nimport { StrokeOptions } from '../shared/freehand/types'\n\nconst PEN_EASING = (t: number) => t * 0.65 + SIN((t * PI) / 2) * 0.35\n\nconst simulatePressureSettings = (strokeWidth: number): StrokeOptions => {\n\treturn {\n\t\tsize: 1 + strokeWidth,\n\t\tthinning: 0.5,\n\t\tstreamline: 0.62 + ((1 + strokeWidth) / 8) * 0.06,\n\t\tsmoothing: 0.62,\n\t\teasing: EASINGS.easeOutSine,\n\t\tsimulatePressure: true,\n\t}\n}\n\nconst realPressureSettings = (strokeWidth: number): StrokeOptions => {\n\treturn {\n\t\tsize: 1 + strokeWidth * 1.2,\n\t\tthinning: 0.62,\n\t\tstreamline: 0.62,\n\t\tsmoothing: 0.62,\n\t\tsimulatePressure: false,\n\t\teasing: PEN_EASING,\n\t}\n}\n\nconst solidSettings = (strokeWidth: number): StrokeOptions => {\n\treturn {\n\t\tsize: 1 + strokeWidth,\n\t\tthinning: 0,\n\t\tstreamline: 0.62 + ((1 + strokeWidth) / 8) * 0.06,\n\t\tsmoothing: 0.62,\n\t\tsimulatePressure: false,\n\t\teasing: EASINGS.linear,\n\t}\n}\n\nexport function getHighlightFreehandSettings({\n\tstrokeWidth,\n\tshowAsComplete,\n}: {\n\tstrokeWidth: number\n\tshowAsComplete: boolean\n}): StrokeOptions {\n\treturn {\n\t\tsize: 1 + strokeWidth,\n\t\tthinning: 0,\n\t\tstreamline: 0.5,\n\t\tsmoothing: 0.5,\n\t\tsimulatePressure: false,\n\t\teasing: EASINGS.easeOutSine,\n\t\tlast: showAsComplete,\n\t}\n}\n\nexport function getFreehandOptions(\n\tshapeProps: { dash: TLDefaultDashStyle; isPen: boolean; isComplete: boolean },\n\tstrokeWidth: number,\n\tforceComplete: boolean,\n\tforceSolid: boolean\n): StrokeOptions {\n\treturn {\n\t\t...(forceSolid\n\t\t\t? solidSettings(strokeWidth)\n\t\t\t: shapeProps.dash === 'draw'\n\t\t\t\t? shapeProps.isPen\n\t\t\t\t\t? realPressureSettings(strokeWidth)\n\t\t\t\t\t: simulatePressureSettings(strokeWidth)\n\t\t\t\t: solidSettings(strokeWidth)),\n\t\tlast: shapeProps.isComplete || forceComplete,\n\t}\n}\n\nexport function getPointsFromSegments(segments: TLDrawShapeSegment[]) {\n\tconst points: Vec[] = []\n\n\tfor (const segment of segments) {\n\t\tif (segment.type === 'free' || segment.points.length < 2) {\n\t\t\tpoints.push(...segment.points.map(Vec.Cast))\n\t\t} else {\n\t\t\tconst pointsToInterpolate = Math.max(\n\t\t\t\t4,\n\t\t\t\tMath.floor(Vec.Dist(segment.points[0], segment.points[1]) / 16)\n\t\t\t)\n\t\t\tpoints.push(...Vec.PointsBetween(segment.points[0], segment.points[1], pointsToInterpolate))\n\t\t}\n\t}\n\n\treturn points\n}\n\nexport function getDrawShapeStrokeDashArray(shape: TLDrawShape, strokeWidth: number) {\n\treturn {\n\t\tdraw: 'none',\n\t\tsolid: `none`,\n\t\tdotted: `0.1 ${strokeWidth * 2}`,\n\t\tdashed: `${strokeWidth * 2} ${strokeWidth * 2}`,\n\t}[shape.props.dash]\n}\n"],
  "mappings": "AAAA;AAAA,EACC;AAAA,EACA;AAAA,EACA;AAAA,EAIA;AAAA,OACM;AAGP,MAAM,aAAa,CAAC,MAAc,IAAI,OAAO,IAAK,IAAI,KAAM,CAAC,IAAI;AAEjE,MAAM,2BAA2B,CAAC,gBAAuC;AACxE,SAAO;AAAA,IACN,MAAM,IAAI;AAAA,IACV,UAAU;AAAA,IACV,YAAY,QAAS,IAAI,eAAe,IAAK;AAAA,IAC7C,WAAW;AAAA,IACX,QAAQ,QAAQ;AAAA,IAChB,kBAAkB;AAAA,EACnB;AACD;AAEA,MAAM,uBAAuB,CAAC,gBAAuC;AACpE,SAAO;AAAA,IACN,MAAM,IAAI,cAAc;AAAA,IACxB,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,kBAAkB;AAAA,IAClB,QAAQ;AAAA,EACT;AACD;AAEA,MAAM,gBAAgB,CAAC,gBAAuC;AAC7D,SAAO;AAAA,IACN,MAAM,IAAI;AAAA,IACV,UAAU;AAAA,IACV,YAAY,QAAS,IAAI,eAAe,IAAK;AAAA,IAC7C,WAAW;AAAA,IACX,kBAAkB;AAAA,IAClB,QAAQ,QAAQ;AAAA,EACjB;AACD;AAEO,SAAS,6BAA6B;AAAA,EAC5C;AAAA,EACA;AACD,GAGkB;AACjB,SAAO;AAAA,IACN,MAAM,IAAI;AAAA,IACV,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,WAAW;AAAA,IACX,kBAAkB;AAAA,IAClB,QAAQ,QAAQ;AAAA,IAChB,MAAM;AAAA,EACP;AACD;AAEO,SAAS,mBACf,YACA,aACA,eACA,YACgB;AAChB,SAAO;AAAA,IACN,GAAI,aACD,cAAc,WAAW,IACzB,WAAW,SAAS,SACnB,WAAW,QACV,qBAAqB,WAAW,IAChC,yBAAyB,WAAW,IACrC,cAAc,WAAW;AAAA,IAC7B,MAAM,WAAW,cAAc;AAAA,EAChC;AACD;AAEO,SAAS,sBAAsB,UAAgC;AACrE,QAAM,SAAgB,CAAC;AAEvB,aAAW,WAAW,UAAU;AAC/B,QAAI,QAAQ,SAAS,UAAU,QAAQ,OAAO,SAAS,GAAG;AACzD,aAAO,KAAK,GAAG,QAAQ,OAAO,IAAI,IAAI,IAAI,CAAC;AAAA,IAC5C,OAAO;AACN,YAAM,sBAAsB,KAAK;AAAA,QAChC;AAAA,QACA,KAAK,MAAM,IAAI,KAAK,QAAQ,OAAO,CAAC,GAAG,QAAQ,OAAO,CAAC,CAAC,IAAI,EAAE;AAAA,MAC/D;AACA,aAAO,KAAK,GAAG,IAAI,cAAc,QAAQ,OAAO,CAAC,GAAG,QAAQ,OAAO,CAAC,GAAG,mBAAmB,CAAC;AAAA,IAC5F;AAAA,EACD;AAEA,SAAO;AACR;AAEO,SAAS,4BAA4B,OAAoB,aAAqB;AACpF,SAAO;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ,OAAO,cAAc,CAAC;AAAA,IAC9B,QAAQ,GAAG,cAAc,CAAC,IAAI,cAAc,CAAC;AAAA,EAC9C,EAAE,MAAM,MAAM,IAAI;AACnB;",
  "names": []
}
