{
  "version": 3,
  "sources": ["../../../../../src/lib/tools/HandTool/childStates/Dragging.ts"],
  "sourcesContent": ["import { CAMERA_SLIDE_FRICTION, StateNode, TLEventHandlers, Vec } from '@tldraw/editor'\n\nexport class Dragging extends StateNode {\n\tstatic override id = 'dragging'\n\n\toverride onEnter = () => {\n\t\tthis.update()\n\t}\n\n\toverride onPointerMove: TLEventHandlers['onPointerMove'] = () => {\n\t\tthis.update()\n\t}\n\n\toverride onPointerUp: TLEventHandlers['onPointerUp'] = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onCancel: TLEventHandlers['onCancel'] = () => {\n\t\tthis.complete()\n\t}\n\n\toverride onComplete = () => {\n\t\tthis.complete()\n\t}\n\n\tprivate update() {\n\t\tconst { currentScreenPoint, previousScreenPoint } = this.editor.inputs\n\n\t\tconst delta = Vec.Sub(currentScreenPoint, previousScreenPoint)\n\n\t\tif (Math.abs(delta.x) > 0 || Math.abs(delta.y) > 0) {\n\t\t\tthis.editor.pan(delta)\n\t\t}\n\t}\n\n\tprivate complete() {\n\t\tthis.editor.slideCamera({\n\t\t\tspeed: Math.min(2, this.editor.inputs.pointerVelocity.len()),\n\t\t\tdirection: this.editor.inputs.pointerVelocity,\n\t\t\tfriction: CAMERA_SLIDE_FRICTION,\n\t\t})\n\n\t\tthis.parent.transition('idle')\n\t}\n}\n"],
  "mappings": "AAAA,SAAS,uBAAuB,WAA4B,WAAW;AAEhE,MAAM,iBAAiB,UAAU;AAAA,EACvC,OAAgB,KAAK;AAAA,EAEZ,UAAU,MAAM;AACxB,SAAK,OAAO;AAAA,EACb;AAAA,EAES,gBAAkD,MAAM;AAChE,SAAK,OAAO;AAAA,EACb;AAAA,EAES,cAA8C,MAAM;AAC5D,SAAK,SAAS;AAAA,EACf;AAAA,EAES,WAAwC,MAAM;AACtD,SAAK,SAAS;AAAA,EACf;AAAA,EAES,aAAa,MAAM;AAC3B,SAAK,SAAS;AAAA,EACf;AAAA,EAEQ,SAAS;AAChB,UAAM,EAAE,oBAAoB,oBAAoB,IAAI,KAAK,OAAO;AAEhE,UAAM,QAAQ,IAAI,IAAI,oBAAoB,mBAAmB;AAE7D,QAAI,KAAK,IAAI,MAAM,CAAC,IAAI,KAAK,KAAK,IAAI,MAAM,CAAC,IAAI,GAAG;AACnD,WAAK,OAAO,IAAI,KAAK;AAAA,IACtB;AAAA,EACD;AAAA,EAEQ,WAAW;AAClB,SAAK,OAAO,YAAY;AAAA,MACvB,OAAO,KAAK,IAAI,GAAG,KAAK,OAAO,OAAO,gBAAgB,IAAI,CAAC;AAAA,MAC3D,WAAW,KAAK,OAAO,OAAO;AAAA,MAC9B,UAAU;AAAA,IACX,CAAC;AAED,SAAK,OAAO,WAAW,MAAM;AAAA,EAC9B;AACD;",
  "names": []
}
