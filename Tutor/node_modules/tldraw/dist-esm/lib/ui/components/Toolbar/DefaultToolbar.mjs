import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { GeoShapeGeoStyle, preventDefault, track, useEditor, useValue } from "@tldraw/editor";
import classNames from "classnames";
import hotkeys from "hotkeys-js";
import React, { memo, useEffect, useMemo } from "react";
import { PORTRAIT_BREAKPOINT } from "../../constants.mjs";
import { useBreakpoint } from "../../context/breakpoints.mjs";
import { useTldrawUiComponents } from "../../context/components.mjs";
import { areShortcutsDisabled } from "../../hooks/useKeyboardShortcuts.mjs";
import { useReadonly } from "../../hooks/useReadonly.mjs";
import { useToolbarSchema } from "../../hooks/useToolbarSchema.mjs";
import { useTranslation } from "../../hooks/useTranslation/useTranslation.mjs";
import { kbdStr } from "../../kbd-utils.mjs";
import { MobileStylePanel } from "../MobileStylePanel.mjs";
import { TldrawUiButton } from "../primitives/Button/TldrawUiButton.mjs";
import { TldrawUiButtonIcon } from "../primitives/Button/TldrawUiButtonIcon.mjs";
import {
  TldrawUiDropdownMenuContent,
  TldrawUiDropdownMenuItem,
  TldrawUiDropdownMenuRoot,
  TldrawUiDropdownMenuTrigger
} from "../primitives/TldrawUiDropdownMenu.mjs";
import { ToggleToolLockedButton } from "./ToggleToolLockedButton.mjs";
const DefaultToolbar = memo(function DefaultToolbar2() {
  const editor = useEditor();
  const msg = useTranslation();
  const breakpoint = useBreakpoint();
  const rMostRecentlyActiveDropdownItem = React.useRef(void 0);
  const isReadonlyMode = useReadonly();
  const toolbarItems = useToolbarSchema();
  const activeToolId = useValue("current tool id", () => editor.getCurrentToolId(), [editor]);
  const geoState = useValue(
    "geo",
    () => editor.getSharedStyles().getAsKnownValue(GeoShapeGeoStyle),
    [editor]
  );
  const getTitle = (item) => item.label ? `${msg(item.label)} ${item.kbd ? kbdStr(item.kbd) : ""}` : "";
  const activeTLUiToolbarItem = toolbarItems.find((item) => {
    return isActiveTLUiToolItem(item.toolItem, activeToolId, geoState);
  });
  const { itemsInPanel, itemsInDropdown } = useToolbarItems();
  const dropdownFirstItem = useMemo(() => {
    let dropdownFirstItem2 = itemsInDropdown.find((item) => item === activeTLUiToolbarItem);
    if (!dropdownFirstItem2) {
      if (!rMostRecentlyActiveDropdownItem.current) {
        rMostRecentlyActiveDropdownItem.current = itemsInDropdown[0];
      }
      dropdownFirstItem2 = rMostRecentlyActiveDropdownItem.current;
      if (!itemsInDropdown.includes(dropdownFirstItem2)) {
        dropdownFirstItem2 = itemsInDropdown[0];
      }
    }
    rMostRecentlyActiveDropdownItem.current = dropdownFirstItem2;
    return dropdownFirstItem2;
  }, [activeTLUiToolbarItem, itemsInDropdown]);
  useEffect(() => {
    const itemsWithShortcuts = [...itemsInPanel, dropdownFirstItem];
    for (let i = 0; i < Math.min(10, itemsWithShortcuts.length); i++) {
      const indexKbd = `${i + 1}`.slice(-1);
      hotkeys(indexKbd, (event) => {
        if (areShortcutsDisabled(editor))
          return;
        preventDefault(event);
        itemsWithShortcuts[i].toolItem.onSelect("kbd");
      });
    }
    return () => {
      hotkeys.unbind("1,2,3,4,5,6,7,8,9,0");
    };
  }, [dropdownFirstItem, editor, itemsInPanel]);
  const { ActionsMenu, QuickActions } = useTldrawUiComponents();
  return /* @__PURE__ */ jsx("div", { className: "tlui-toolbar", children: /* @__PURE__ */ jsxs("div", { className: "tlui-toolbar__inner", children: [
    /* @__PURE__ */ jsxs("div", { className: "tlui-toolbar__left", children: [
      !isReadonlyMode && /* @__PURE__ */ jsxs("div", { className: "tlui-toolbar__extras", children: [
        breakpoint < PORTRAIT_BREAKPOINT.TABLET && /* @__PURE__ */ jsxs("div", { className: "tlui-toolbar__extras__controls tlui-buttons__horizontal", children: [
          QuickActions && /* @__PURE__ */ jsx(QuickActions, {}),
          ActionsMenu && /* @__PURE__ */ jsx(ActionsMenu, {})
        ] }),
        /* @__PURE__ */ jsx(ToggleToolLockedButton, { activeToolId })
      ] }),
      /* @__PURE__ */ jsxs(
        "div",
        {
          className: classNames("tlui-toolbar__tools", {
            "tlui-toolbar__tools__mobile": breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM
          }),
          children: [
            itemsInPanel.map(({ toolItem }) => {
              return /* @__PURE__ */ jsx(
                ToolbarButton,
                {
                  item: toolItem,
                  title: getTitle(toolItem),
                  isSelected: isActiveTLUiToolItem(toolItem, activeToolId, geoState)
                },
                toolItem.id
              );
            }),
            itemsInDropdown.length ? /* @__PURE__ */ jsxs(Fragment, { children: [
              /* @__PURE__ */ jsx(
                ToolbarButton,
                {
                  item: dropdownFirstItem.toolItem,
                  title: getTitle(dropdownFirstItem.toolItem),
                  isSelected: isActiveTLUiToolItem(
                    dropdownFirstItem.toolItem,
                    activeToolId,
                    geoState
                  )
                },
                dropdownFirstItem.toolItem.id
              ),
              /* @__PURE__ */ jsxs(TldrawUiDropdownMenuRoot, { id: "toolbar overflow", modal: false, children: [
                /* @__PURE__ */ jsx(TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ jsx(
                  TldrawUiButton,
                  {
                    title: msg("tool-panel.more"),
                    type: "tool",
                    className: "tlui-toolbar__overflow",
                    "data-testid": "tools.more-button",
                    children: /* @__PURE__ */ jsx(TldrawUiButtonIcon, { icon: "chevron-up" })
                  }
                ) }),
                /* @__PURE__ */ jsx(TldrawUiDropdownMenuContent, { side: "top", align: "center", children: /* @__PURE__ */ jsx(OverflowToolsContent, { toolbarItems: itemsInDropdown }) })
              ] })
            ] }) : null
          ]
        }
      )
    ] }),
    breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM && !isReadonlyMode && /* @__PURE__ */ jsx("div", { className: "tlui-toolbar__tools", children: /* @__PURE__ */ jsx(MobileStylePanel, {}) })
  ] }) });
});
const OverflowToolsContent = track(function OverflowToolsContent2({
  toolbarItems
}) {
  const msg = useTranslation();
  return /* @__PURE__ */ jsx("div", { className: "tlui-buttons__grid", "data-testid": "tools.more-content", children: toolbarItems.map(({ toolItem: { id, meta, kbd, label, onSelect, icon } }) => {
    return /* @__PURE__ */ jsx(
      TldrawUiDropdownMenuItem,
      {
        "data-tool": id,
        "data-geo": meta?.geo ?? "",
        "aria-label": label,
        children: /* @__PURE__ */ jsx(
          TldrawUiButton,
          {
            type: "icon",
            className: "tlui-button-grid__button",
            onClick: () => onSelect("toolbar"),
            "data-testid": `tools.more.${id}`,
            title: label ? `${msg(label)} ${kbd ? kbdStr(kbd) : ""}` : "",
            children: /* @__PURE__ */ jsx(TldrawUiButtonIcon, { icon })
          }
        )
      },
      id
    );
  }) });
});
function ToolbarButton({
  item,
  title,
  isSelected
}) {
  return /* @__PURE__ */ jsx(
    TldrawUiButton,
    {
      type: "tool",
      "data-testid": `tools.${item.id}`,
      "data-tool": item.id,
      "data-geo": item.meta?.geo ?? "",
      "aria-label": item.label,
      "data-state": isSelected ? "selected" : void 0,
      onClick: () => item.onSelect("toolbar"),
      title,
      onTouchStart: (e) => {
        preventDefault(e);
        item.onSelect("toolbar");
      },
      children: /* @__PURE__ */ jsx(TldrawUiButtonIcon, { icon: item.icon })
    }
  );
}
const isActiveTLUiToolItem = (item, activeToolId, geoState) => {
  return item.meta?.geo ? activeToolId === "geo" && geoState === item.meta?.geo : activeToolId === item.id;
};
function useToolbarItems() {
  const breakpoint = useBreakpoint();
  const allToolbarItems = useToolbarSchema();
  const isReadonlyMode = useReadonly();
  return useMemo(() => {
    const visibleItems = allToolbarItems.filter((item) => !isReadonlyMode || item.readonlyOk);
    const overflowIndex = Math.min(8, 5 + breakpoint);
    const itemsInPanel = visibleItems.slice(0, overflowIndex);
    const itemsInDropdown = visibleItems.slice(overflowIndex);
    if (itemsInDropdown.length <= 2) {
      return {
        itemsInPanel: visibleItems,
        itemsInDropdown: []
      };
    }
    return { itemsInPanel, itemsInDropdown };
  }, [allToolbarItems, breakpoint, isReadonlyMode]);
}
export {
  DefaultToolbar,
  useToolbarItems
};
//# sourceMappingURL=DefaultToolbar.mjs.map
