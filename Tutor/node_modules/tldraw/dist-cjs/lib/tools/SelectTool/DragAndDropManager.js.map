{
  "version": 3,
  "sources": ["../../../../src/lib/tools/SelectTool/DragAndDropManager.ts"],
  "sourcesContent": ["import { Editor, TLShape, TLShapeId, Vec, compact } from '@tldraw/editor'\n\nconst LAG_DURATION = 100\n\n/** @public */\nexport class DragAndDropManager {\n\tconstructor(public editor: Editor) {\n\t\teditor.disposables.add(this.dispose)\n\t}\n\n\tprevDroppingShapeId: TLShapeId | null = null\n\n\tdroppingNodeTimer: ReturnType<typeof setTimeout> | null = null\n\n\tfirst = true\n\n\tupdateDroppingNode(movingShapes: TLShape[], cb: () => void) {\n\t\tif (this.first) {\n\t\t\tthis.prevDroppingShapeId =\n\t\t\t\tthis.editor.getDroppingOverShape(this.editor.inputs.originPagePoint, movingShapes)?.id ??\n\t\t\t\tnull\n\t\t\tthis.first = false\n\t\t}\n\n\t\tif (this.droppingNodeTimer === null) {\n\t\t\tthis.setDragTimer(movingShapes, LAG_DURATION * 10, cb)\n\t\t} else if (this.editor.inputs.pointerVelocity.len() > 0.5) {\n\t\t\tclearInterval(this.droppingNodeTimer)\n\t\t\tthis.setDragTimer(movingShapes, LAG_DURATION, cb)\n\t\t}\n\t}\n\n\tprivate setDragTimer(movingShapes: TLShape[], duration: number, cb: () => void) {\n\t\tthis.droppingNodeTimer = setTimeout(() => {\n\t\t\tthis.editor.batch(() => {\n\t\t\t\tthis.handleDrag(this.editor.inputs.currentPagePoint, movingShapes, cb)\n\t\t\t})\n\t\t\tthis.droppingNodeTimer = null\n\t\t}, duration)\n\t}\n\n\tprivate handleDrag(point: Vec, movingShapes: TLShape[], cb?: () => void) {\n\t\tmovingShapes = compact(movingShapes.map((shape) => this.editor.getShape(shape.id)))\n\n\t\tconst nextDroppingShapeId = this.editor.getDroppingOverShape(point, movingShapes)?.id ?? null\n\n\t\t// is the next dropping shape id different than the last one?\n\t\tif (nextDroppingShapeId === this.prevDroppingShapeId) {\n\t\t\treturn\n\t\t}\n\n\t\t// the old previous one\n\t\tconst { prevDroppingShapeId } = this\n\n\t\tconst prevDroppingShape = prevDroppingShapeId && this.editor.getShape(prevDroppingShapeId)\n\t\tconst nextDroppingShape = nextDroppingShapeId && this.editor.getShape(nextDroppingShapeId)\n\n\t\t// Even if we don't have a next dropping shape id (i.e. if we're dropping\n\t\t// onto the page) set the prev to the current, to avoid repeat calls to\n\t\t// the previous parent's onDragShapesOut\n\n\t\tif (prevDroppingShape) {\n\t\t\tthis.editor.getShapeUtil(prevDroppingShape).onDragShapesOut?.(prevDroppingShape, movingShapes)\n\t\t}\n\n\t\tif (nextDroppingShape) {\n\t\t\tconst res = this.editor\n\t\t\t\t.getShapeUtil(nextDroppingShape)\n\t\t\t\t.onDragShapesOver?.(nextDroppingShape, movingShapes)\n\n\t\t\tif (res && res.shouldHint) {\n\t\t\t\tthis.editor.setHintingShapes([nextDroppingShape.id])\n\t\t\t}\n\t\t} else {\n\t\t\t// If we're dropping onto the page, then clear hinting ids\n\t\t\tthis.editor.setHintingShapes([])\n\t\t}\n\n\t\tcb?.()\n\n\t\t// next -> curr\n\t\tthis.prevDroppingShapeId = nextDroppingShapeId\n\t}\n\n\tdropShapes(shapes: TLShape[]) {\n\t\tconst { prevDroppingShapeId } = this\n\n\t\tthis.handleDrag(this.editor.inputs.currentPagePoint, shapes)\n\n\t\tif (prevDroppingShapeId) {\n\t\t\tconst shape = this.editor.getShape(prevDroppingShapeId)\n\t\t\tif (!shape) return\n\t\t\tthis.editor.getShapeUtil(shape).onDropShapesOver?.(shape, shapes)\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis.prevDroppingShapeId = null\n\n\t\tif (this.droppingNodeTimer !== null) {\n\t\t\tclearInterval(this.droppingNodeTimer)\n\t\t}\n\n\t\tthis.droppingNodeTimer = null\n\t\tthis.editor.setHintingShapes([])\n\t\tthis.first = true\n\t}\n\n\tdispose = () => {\n\t\tthis.clear()\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAyD;AAEzD,MAAM,eAAe;AAGd,MAAM,mBAAmB;AAAA,EAC/B,YAAmB,QAAgB;AAAhB;AAClB,WAAO,YAAY,IAAI,KAAK,OAAO;AAAA,EACpC;AAAA,EAEA,sBAAwC;AAAA,EAExC,oBAA0D;AAAA,EAE1D,QAAQ;AAAA,EAER,mBAAmB,cAAyB,IAAgB;AAC3D,QAAI,KAAK,OAAO;AACf,WAAK,sBACJ,KAAK,OAAO,qBAAqB,KAAK,OAAO,OAAO,iBAAiB,YAAY,GAAG,MACpF;AACD,WAAK,QAAQ;AAAA,IACd;AAEA,QAAI,KAAK,sBAAsB,MAAM;AACpC,WAAK,aAAa,cAAc,eAAe,IAAI,EAAE;AAAA,IACtD,WAAW,KAAK,OAAO,OAAO,gBAAgB,IAAI,IAAI,KAAK;AAC1D,oBAAc,KAAK,iBAAiB;AACpC,WAAK,aAAa,cAAc,cAAc,EAAE;AAAA,IACjD;AAAA,EACD;AAAA,EAEQ,aAAa,cAAyB,UAAkB,IAAgB;AAC/E,SAAK,oBAAoB,WAAW,MAAM;AACzC,WAAK,OAAO,MAAM,MAAM;AACvB,aAAK,WAAW,KAAK,OAAO,OAAO,kBAAkB,cAAc,EAAE;AAAA,MACtE,CAAC;AACD,WAAK,oBAAoB;AAAA,IAC1B,GAAG,QAAQ;AAAA,EACZ;AAAA,EAEQ,WAAW,OAAY,cAAyB,IAAiB;AACxE,uBAAe,uBAAQ,aAAa,IAAI,CAAC,UAAU,KAAK,OAAO,SAAS,MAAM,EAAE,CAAC,CAAC;AAElF,UAAM,sBAAsB,KAAK,OAAO,qBAAqB,OAAO,YAAY,GAAG,MAAM;AAGzF,QAAI,wBAAwB,KAAK,qBAAqB;AACrD;AAAA,IACD;AAGA,UAAM,EAAE,oBAAoB,IAAI;AAEhC,UAAM,oBAAoB,uBAAuB,KAAK,OAAO,SAAS,mBAAmB;AACzF,UAAM,oBAAoB,uBAAuB,KAAK,OAAO,SAAS,mBAAmB;AAMzF,QAAI,mBAAmB;AACtB,WAAK,OAAO,aAAa,iBAAiB,EAAE,kBAAkB,mBAAmB,YAAY;AAAA,IAC9F;AAEA,QAAI,mBAAmB;AACtB,YAAM,MAAM,KAAK,OACf,aAAa,iBAAiB,EAC9B,mBAAmB,mBAAmB,YAAY;AAEpD,UAAI,OAAO,IAAI,YAAY;AAC1B,aAAK,OAAO,iBAAiB,CAAC,kBAAkB,EAAE,CAAC;AAAA,MACpD;AAAA,IACD,OAAO;AAEN,WAAK,OAAO,iBAAiB,CAAC,CAAC;AAAA,IAChC;AAEA,SAAK;AAGL,SAAK,sBAAsB;AAAA,EAC5B;AAAA,EAEA,WAAW,QAAmB;AAC7B,UAAM,EAAE,oBAAoB,IAAI;AAEhC,SAAK,WAAW,KAAK,OAAO,OAAO,kBAAkB,MAAM;AAE3D,QAAI,qBAAqB;AACxB,YAAM,QAAQ,KAAK,OAAO,SAAS,mBAAmB;AACtD,UAAI,CAAC;AAAO;AACZ,WAAK,OAAO,aAAa,KAAK,EAAE,mBAAmB,OAAO,MAAM;AAAA,IACjE;AAAA,EACD;AAAA,EAEA,QAAQ;AACP,SAAK,sBAAsB;AAE3B,QAAI,KAAK,sBAAsB,MAAM;AACpC,oBAAc,KAAK,iBAAiB;AAAA,IACrC;AAEA,SAAK,oBAAoB;AACzB,SAAK,OAAO,iBAAiB,CAAC,CAAC;AAC/B,SAAK,QAAQ;AAAA,EACd;AAAA,EAEA,UAAU,MAAM;AACf,SAAK,MAAM;AAAA,EACZ;AACD;",
  "names": []
}
