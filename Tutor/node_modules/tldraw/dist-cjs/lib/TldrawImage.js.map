{
  "version": 3,
  "sources": ["../../src/lib/TldrawImage.tsx"],
  "sourcesContent": ["import {\n\tEditor,\n\tErrorScreen,\n\tExpand,\n\tLoadingScreen,\n\tStoreSnapshot,\n\tTLAnyShapeUtilConstructor,\n\tTLPageId,\n\tTLRecord,\n\tTLSvgOptions,\n\tuseShallowArrayIdentity,\n\tuseTLStore,\n} from '@tldraw/editor'\nimport { memo, useLayoutEffect, useMemo, useState } from 'react'\nimport { defaultShapeUtils } from './defaultShapeUtils'\nimport { usePreloadAssets } from './ui/hooks/usePreloadAssets'\nimport { getSvgAsImage, getSvgAsString } from './utils/export/export'\nimport { useDefaultEditorAssetsWithOverrides } from './utils/static-assets/assetUrls'\n\n/**\n * Props for the {@link tldraw#TldrawImage} component.\n *\n * @public\n **/\nexport type TldrawImageProps = Expand<\n\t{\n\t\t/**\n\t\t * The snapshot to display.\n\t\t */\n\t\tsnapshot: StoreSnapshot<TLRecord>\n\n\t\t/**\n\t\t * The image format to use. Defaults to 'svg'.\n\t\t */\n\t\tformat?: 'svg' | 'png'\n\n\t\t/**\n\t\t * The page to display. Defaults to the first page.\n\t\t */\n\t\tpageId?: TLPageId\n\n\t\t/**\n\t\t * Additional shape utils to use.\n\t\t */\n\t\tshapeUtils?: readonly TLAnyShapeUtilConstructor[]\n\t} & Partial<TLSvgOptions>\n>\n\n/**\n * A renderered SVG image of a Tldraw snapshot.\n *\n * @example\n * ```tsx\n * <TldrawImage snapshot={snapshot} />\n * \tsnapshot={snapshot}\n * \tpageId={pageId}\n * \tbackground={false}\n *  darkMode={true}\n *  bounds={new Box(0,0,600,400)}\n *  scale={1}\n * />\n * ```\n *\n * @public\n */\nexport const TldrawImage = memo(function TldrawImage(props: TldrawImageProps) {\n\tconst [url, setUrl] = useState<string | null>(null)\n\tconst [container, setContainer] = useState<HTMLDivElement | null>(null)\n\n\tconst shapeUtils = useShallowArrayIdentity(props.shapeUtils ?? [])\n\tconst shapeUtilsWithDefaults = useMemo(() => [...defaultShapeUtils, ...shapeUtils], [shapeUtils])\n\tconst store = useTLStore({ snapshot: props.snapshot, shapeUtils: shapeUtilsWithDefaults })\n\n\tconst assets = useDefaultEditorAssetsWithOverrides()\n\tconst { done: preloadingComplete, error: preloadingError } = usePreloadAssets(assets)\n\n\tconst {\n\t\tpageId,\n\t\tbounds,\n\t\tscale,\n\t\tbackground,\n\t\tpadding,\n\t\tdarkMode,\n\t\tpreserveAspectRatio,\n\t\tformat = 'svg',\n\t} = props\n\n\tuseLayoutEffect(() => {\n\t\tif (!container) return\n\t\tif (!store) return\n\t\tif (!preloadingComplete) return\n\n\t\tlet isCancelled = false\n\n\t\tconst tempElm = document.createElement('div')\n\t\tcontainer.appendChild(tempElm)\n\t\tcontainer.classList.add('tl-container', 'tl-theme__light')\n\n\t\tconst editor = new Editor({\n\t\t\tstore,\n\t\t\tshapeUtils: shapeUtilsWithDefaults ?? [],\n\t\t\ttools: [],\n\t\t\tgetContainer: () => tempElm,\n\t\t})\n\n\t\tif (pageId) editor.setCurrentPage(pageId)\n\n\t\tconst shapeIds = editor.getCurrentPageShapeIds()\n\n\t\tasync function setSvg() {\n\t\t\tconst svg = await editor.getSvg([...shapeIds], {\n\t\t\t\tbounds,\n\t\t\t\tscale,\n\t\t\t\tbackground,\n\t\t\t\tpadding,\n\t\t\t\tdarkMode,\n\t\t\t\tpreserveAspectRatio,\n\t\t\t})\n\n\t\t\tif (svg && !isCancelled) {\n\t\t\t\tif (format === 'svg') {\n\t\t\t\t\tconst string = await getSvgAsString(svg)\n\t\t\t\t\tif (!isCancelled) {\n\t\t\t\t\t\tconst blob = new Blob([string], { type: 'image/svg+xml' })\n\t\t\t\t\t\tconst url = URL.createObjectURL(blob)\n\t\t\t\t\t\tsetUrl(url)\n\t\t\t\t\t}\n\t\t\t\t} else if (format === 'png') {\n\t\t\t\t\tconst blob = await getSvgAsImage(svg, editor.environment.isSafari, {\n\t\t\t\t\t\ttype: format,\n\t\t\t\t\t\tquality: 1,\n\t\t\t\t\t\tscale: 2,\n\t\t\t\t\t})\n\t\t\t\t\tif (blob && !isCancelled) {\n\t\t\t\t\t\tconst url = URL.createObjectURL(blob)\n\t\t\t\t\t\tsetUrl(url)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\teditor.dispose()\n\t\t}\n\n\t\tsetSvg()\n\n\t\treturn () => {\n\t\t\tisCancelled = true\n\t\t}\n\t}, [\n\t\tformat,\n\t\tcontainer,\n\t\tstore,\n\t\tshapeUtilsWithDefaults,\n\t\tpageId,\n\t\tbounds,\n\t\tscale,\n\t\tbackground,\n\t\tpadding,\n\t\tdarkMode,\n\t\tpreserveAspectRatio,\n\t\tpreloadingComplete,\n\t\tpreloadingError,\n\t])\n\n\tif (preloadingError) {\n\t\treturn <ErrorScreen>Could not load assets.</ErrorScreen>\n\t}\n\n\tif (!preloadingComplete) {\n\t\treturn <LoadingScreen>Loading assets...</LoadingScreen>\n\t}\n\n\treturn (\n\t\t<div ref={setContainer} style={{ position: 'relative', width: '100%', height: '100%' }}>\n\t\t\t{url && <img src={url} style={{ width: '100%', height: '100%' }} />}\n\t\t</div>\n\t)\n})\n"],
  "mappings": "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",
  "names": ["TldrawImage", "url"]
}
