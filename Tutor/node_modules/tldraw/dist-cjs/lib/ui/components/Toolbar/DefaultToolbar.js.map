{
  "version": 3,
  "sources": ["../../../../../src/lib/ui/components/Toolbar/DefaultToolbar.tsx"],
  "sourcesContent": ["import { GeoShapeGeoStyle, preventDefault, track, useEditor, useValue } from '@tldraw/editor'\nimport classNames from 'classnames'\nimport hotkeys from 'hotkeys-js'\nimport React, { memo, useEffect, useMemo } from 'react'\nimport { PORTRAIT_BREAKPOINT } from '../../constants'\nimport { useBreakpoint } from '../../context/breakpoints'\nimport { useTldrawUiComponents } from '../../context/components'\nimport { areShortcutsDisabled } from '../../hooks/useKeyboardShortcuts'\nimport { useReadonly } from '../../hooks/useReadonly'\nimport { TLUiToolbarItem, useToolbarSchema } from '../../hooks/useToolbarSchema'\nimport { TLUiToolItem } from '../../hooks/useTools'\nimport { useTranslation } from '../../hooks/useTranslation/useTranslation'\nimport { kbdStr } from '../../kbd-utils'\nimport { MobileStylePanel } from '../MobileStylePanel'\nimport { TldrawUiButton } from '../primitives/Button/TldrawUiButton'\nimport { TldrawUiButtonIcon } from '../primitives/Button/TldrawUiButtonIcon'\nimport {\n\tTldrawUiDropdownMenuContent,\n\tTldrawUiDropdownMenuItem,\n\tTldrawUiDropdownMenuRoot,\n\tTldrawUiDropdownMenuTrigger,\n} from '../primitives/TldrawUiDropdownMenu'\nimport { ToggleToolLockedButton } from './ToggleToolLockedButton'\n\n/** @public */\nexport const DefaultToolbar = memo(function DefaultToolbar() {\n\tconst editor = useEditor()\n\tconst msg = useTranslation()\n\tconst breakpoint = useBreakpoint()\n\n\tconst rMostRecentlyActiveDropdownItem = React.useRef<TLUiToolbarItem | undefined>(undefined)\n\n\tconst isReadonlyMode = useReadonly()\n\tconst toolbarItems = useToolbarSchema()\n\n\tconst activeToolId = useValue('current tool id', () => editor.getCurrentToolId(), [editor])\n\n\tconst geoState = useValue(\n\t\t'geo',\n\t\t() => editor.getSharedStyles().getAsKnownValue(GeoShapeGeoStyle),\n\t\t[editor]\n\t)\n\n\tconst getTitle = (item: TLUiToolItem) =>\n\t\titem.label ? `${msg(item.label)} ${item.kbd ? kbdStr(item.kbd) : ''}` : ''\n\n\tconst activeTLUiToolbarItem = toolbarItems.find((item) => {\n\t\treturn isActiveTLUiToolItem(item.toolItem, activeToolId, geoState)\n\t})\n\n\tconst { itemsInPanel, itemsInDropdown } = useToolbarItems()\n\tconst dropdownFirstItem = useMemo(() => {\n\t\tlet dropdownFirstItem = itemsInDropdown.find((item) => item === activeTLUiToolbarItem)\n\n\t\tif (!dropdownFirstItem) {\n\t\t\t// If we don't have a currently active dropdown item, use the most\n\t\t\t// recently active dropdown item as the current dropdown first item.\n\n\t\t\t// If haven't ever had a most recently active dropdown item, then\n\t\t\t// make the first item in the dropdown menu the most recently\n\t\t\t// active dropdown item.\n\t\t\tif (!rMostRecentlyActiveDropdownItem.current) {\n\t\t\t\trMostRecentlyActiveDropdownItem.current = itemsInDropdown[0]\n\t\t\t}\n\n\t\t\tdropdownFirstItem = rMostRecentlyActiveDropdownItem.current\n\n\t\t\t// If the most recently active dropdown item is no longer in the\n\t\t\t// dropdown (because the breakpoint has changed) then make the\n\t\t\t// first item in the dropdown menu the most recently active\n\t\t\t// dropdown item.\n\t\t\tif (!itemsInDropdown.includes(dropdownFirstItem)) {\n\t\t\t\tdropdownFirstItem = itemsInDropdown[0]\n\t\t\t}\n\t\t}\n\n\t\t// We want this ref set to remember which item from the current\n\t\t// set of dropdown items was most recently active\n\t\trMostRecentlyActiveDropdownItem.current = dropdownFirstItem\n\n\t\treturn dropdownFirstItem\n\t}, [activeTLUiToolbarItem, itemsInDropdown])\n\n\tuseEffect(() => {\n\t\tconst itemsWithShortcuts = [...itemsInPanel, dropdownFirstItem]\n\t\tfor (let i = 0; i < Math.min(10, itemsWithShortcuts.length); i++) {\n\t\t\tconst indexKbd = `${i + 1}`.slice(-1)\n\t\t\thotkeys(indexKbd, (event) => {\n\t\t\t\tif (areShortcutsDisabled(editor)) return\n\t\t\t\tpreventDefault(event)\n\t\t\t\titemsWithShortcuts[i].toolItem.onSelect('kbd')\n\t\t\t})\n\t\t}\n\t\treturn () => {\n\t\t\thotkeys.unbind('1,2,3,4,5,6,7,8,9,0')\n\t\t}\n\t}, [dropdownFirstItem, editor, itemsInPanel])\n\n\tconst { ActionsMenu, QuickActions } = useTldrawUiComponents()\n\n\treturn (\n\t\t<div className=\"tlui-toolbar\">\n\t\t\t<div className=\"tlui-toolbar__inner\">\n\t\t\t\t<div className=\"tlui-toolbar__left\">\n\t\t\t\t\t{!isReadonlyMode && (\n\t\t\t\t\t\t<div className=\"tlui-toolbar__extras\">\n\t\t\t\t\t\t\t{breakpoint < PORTRAIT_BREAKPOINT.TABLET && (\n\t\t\t\t\t\t\t\t<div className=\"tlui-toolbar__extras__controls tlui-buttons__horizontal\">\n\t\t\t\t\t\t\t\t\t{QuickActions && <QuickActions />}\n\t\t\t\t\t\t\t\t\t{ActionsMenu && <ActionsMenu />}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<ToggleToolLockedButton activeToolId={activeToolId} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName={classNames('tlui-toolbar__tools', {\n\t\t\t\t\t\t\t'tlui-toolbar__tools__mobile': breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM,\n\t\t\t\t\t\t})}\n\t\t\t\t\t>\n\t\t\t\t\t\t{/* Main panel items */}\n\t\t\t\t\t\t{itemsInPanel.map(({ toolItem }) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<ToolbarButton\n\t\t\t\t\t\t\t\t\tkey={toolItem.id}\n\t\t\t\t\t\t\t\t\titem={toolItem}\n\t\t\t\t\t\t\t\t\ttitle={getTitle(toolItem)}\n\t\t\t\t\t\t\t\t\tisSelected={isActiveTLUiToolItem(toolItem, activeToolId, geoState)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t{/* Overflowing Shapes */}\n\t\t\t\t\t\t{itemsInDropdown.length ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{/* Last selected (or first) item from the overflow */}\n\t\t\t\t\t\t\t\t<ToolbarButton\n\t\t\t\t\t\t\t\t\tkey={dropdownFirstItem.toolItem.id}\n\t\t\t\t\t\t\t\t\titem={dropdownFirstItem.toolItem}\n\t\t\t\t\t\t\t\t\ttitle={getTitle(dropdownFirstItem.toolItem)}\n\t\t\t\t\t\t\t\t\tisSelected={isActiveTLUiToolItem(\n\t\t\t\t\t\t\t\t\t\tdropdownFirstItem.toolItem,\n\t\t\t\t\t\t\t\t\t\tactiveToolId,\n\t\t\t\t\t\t\t\t\t\tgeoState\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t{/* The dropdown to select everything else */}\n\t\t\t\t\t\t\t\t<TldrawUiDropdownMenuRoot id=\"toolbar overflow\" modal={false}>\n\t\t\t\t\t\t\t\t\t<TldrawUiDropdownMenuTrigger>\n\t\t\t\t\t\t\t\t\t\t<TldrawUiButton\n\t\t\t\t\t\t\t\t\t\t\ttitle={msg('tool-panel.more')}\n\t\t\t\t\t\t\t\t\t\t\ttype=\"tool\"\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"tlui-toolbar__overflow\"\n\t\t\t\t\t\t\t\t\t\t\tdata-testid=\"tools.more-button\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<TldrawUiButtonIcon icon=\"chevron-up\" />\n\t\t\t\t\t\t\t\t\t\t</TldrawUiButton>\n\t\t\t\t\t\t\t\t\t</TldrawUiDropdownMenuTrigger>\n\t\t\t\t\t\t\t\t\t<TldrawUiDropdownMenuContent side=\"top\" align=\"center\">\n\t\t\t\t\t\t\t\t\t\t<OverflowToolsContent toolbarItems={itemsInDropdown} />\n\t\t\t\t\t\t\t\t\t</TldrawUiDropdownMenuContent>\n\t\t\t\t\t\t\t\t</TldrawUiDropdownMenuRoot>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{breakpoint < PORTRAIT_BREAKPOINT.TABLET_SM && !isReadonlyMode && (\n\t\t\t\t\t<div className=\"tlui-toolbar__tools\">\n\t\t\t\t\t\t<MobileStylePanel />\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t)\n})\n\nconst OverflowToolsContent = track(function OverflowToolsContent({\n\ttoolbarItems,\n}: {\n\ttoolbarItems: TLUiToolbarItem[]\n}) {\n\tconst msg = useTranslation()\n\n\treturn (\n\t\t<div className=\"tlui-buttons__grid\" data-testid=\"tools.more-content\">\n\t\t\t{toolbarItems.map(({ toolItem: { id, meta, kbd, label, onSelect, icon } }) => {\n\t\t\t\treturn (\n\t\t\t\t\t<TldrawUiDropdownMenuItem\n\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\tdata-tool={id}\n\t\t\t\t\t\tdata-geo={meta?.geo ?? ''}\n\t\t\t\t\t\taria-label={label}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TldrawUiButton\n\t\t\t\t\t\t\ttype=\"icon\"\n\t\t\t\t\t\t\tclassName=\"tlui-button-grid__button\"\n\t\t\t\t\t\t\tonClick={() => onSelect('toolbar')}\n\t\t\t\t\t\t\tdata-testid={`tools.more.${id}`}\n\t\t\t\t\t\t\ttitle={label ? `${msg(label)} ${kbd ? kbdStr(kbd) : ''}` : ''}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<TldrawUiButtonIcon icon={icon} />\n\t\t\t\t\t\t</TldrawUiButton>\n\t\t\t\t\t</TldrawUiDropdownMenuItem>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n})\n\nfunction ToolbarButton({\n\titem,\n\ttitle,\n\tisSelected,\n}: {\n\titem: TLUiToolItem\n\ttitle: string\n\tisSelected: boolean\n}) {\n\treturn (\n\t\t<TldrawUiButton\n\t\t\ttype=\"tool\"\n\t\t\tdata-testid={`tools.${item.id}`}\n\t\t\tdata-tool={item.id}\n\t\t\tdata-geo={item.meta?.geo ?? ''}\n\t\t\taria-label={item.label}\n\t\t\tdata-state={isSelected ? 'selected' : undefined}\n\t\t\tonClick={() => item.onSelect('toolbar')}\n\t\t\ttitle={title}\n\t\t\tonTouchStart={(e) => {\n\t\t\t\tpreventDefault(e)\n\t\t\t\titem.onSelect('toolbar')\n\t\t\t}}\n\t\t>\n\t\t\t<TldrawUiButtonIcon icon={item.icon} />\n\t\t</TldrawUiButton>\n\t)\n}\n\nconst isActiveTLUiToolItem = (\n\titem: TLUiToolItem,\n\tactiveToolId: string | undefined,\n\tgeoState: string | null | undefined\n) => {\n\treturn item.meta?.geo\n\t\t? activeToolId === 'geo' && geoState === item.meta?.geo\n\t\t: activeToolId === item.id\n}\n\nexport function useToolbarItems() {\n\tconst breakpoint = useBreakpoint()\n\tconst allToolbarItems = useToolbarSchema()\n\tconst isReadonlyMode = useReadonly()\n\treturn useMemo(() => {\n\t\tconst visibleItems = allToolbarItems.filter((item) => !isReadonlyMode || item.readonlyOk)\n\t\tconst overflowIndex = Math.min(8, 5 + breakpoint)\n\n\t\tconst itemsInPanel = visibleItems.slice(0, overflowIndex)\n\t\tconst itemsInDropdown = visibleItems.slice(overflowIndex)\n\n\t\tif (itemsInDropdown.length <= 2) {\n\t\t\treturn {\n\t\t\t\titemsInPanel: visibleItems,\n\t\t\t\titemsInDropdown: [],\n\t\t\t}\n\t\t}\n\n\t\treturn { itemsInPanel, itemsInDropdown }\n\t}, [allToolbarItems, breakpoint, isReadonlyMode])\n}\n"],
  "mappings": "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",
  "names": ["DefaultToolbar", "React", "dropdownFirstItem", "hotkeys", "classNames", "OverflowToolsContent"]
}
