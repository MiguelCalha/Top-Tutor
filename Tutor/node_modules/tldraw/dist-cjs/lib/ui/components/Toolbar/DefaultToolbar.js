"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DefaultToolbar_exports = {};
__export(DefaultToolbar_exports, {
  DefaultToolbar: () => DefaultToolbar,
  useToolbarItems: () => useToolbarItems
});
module.exports = __toCommonJS(DefaultToolbar_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_editor = require("@tldraw/editor");
var import_classnames = __toESM(require("classnames"));
var import_hotkeys_js = __toESM(require("hotkeys-js"));
var import_react = __toESM(require("react"));
var import_constants = require("../../constants");
var import_breakpoints = require("../../context/breakpoints");
var import_components = require("../../context/components");
var import_useKeyboardShortcuts = require("../../hooks/useKeyboardShortcuts");
var import_useReadonly = require("../../hooks/useReadonly");
var import_useToolbarSchema = require("../../hooks/useToolbarSchema");
var import_useTranslation = require("../../hooks/useTranslation/useTranslation");
var import_kbd_utils = require("../../kbd-utils");
var import_MobileStylePanel = require("../MobileStylePanel");
var import_TldrawUiButton = require("../primitives/Button/TldrawUiButton");
var import_TldrawUiButtonIcon = require("../primitives/Button/TldrawUiButtonIcon");
var import_TldrawUiDropdownMenu = require("../primitives/TldrawUiDropdownMenu");
var import_ToggleToolLockedButton = require("./ToggleToolLockedButton");
const DefaultToolbar = (0, import_react.memo)(function DefaultToolbar2() {
  const editor = (0, import_editor.useEditor)();
  const msg = (0, import_useTranslation.useTranslation)();
  const breakpoint = (0, import_breakpoints.useBreakpoint)();
  const rMostRecentlyActiveDropdownItem = import_react.default.useRef(void 0);
  const isReadonlyMode = (0, import_useReadonly.useReadonly)();
  const toolbarItems = (0, import_useToolbarSchema.useToolbarSchema)();
  const activeToolId = (0, import_editor.useValue)("current tool id", () => editor.getCurrentToolId(), [editor]);
  const geoState = (0, import_editor.useValue)(
    "geo",
    () => editor.getSharedStyles().getAsKnownValue(import_editor.GeoShapeGeoStyle),
    [editor]
  );
  const getTitle = (item) => item.label ? `${msg(item.label)} ${item.kbd ? (0, import_kbd_utils.kbdStr)(item.kbd) : ""}` : "";
  const activeTLUiToolbarItem = toolbarItems.find((item) => {
    return isActiveTLUiToolItem(item.toolItem, activeToolId, geoState);
  });
  const { itemsInPanel, itemsInDropdown } = useToolbarItems();
  const dropdownFirstItem = (0, import_react.useMemo)(() => {
    let dropdownFirstItem2 = itemsInDropdown.find((item) => item === activeTLUiToolbarItem);
    if (!dropdownFirstItem2) {
      if (!rMostRecentlyActiveDropdownItem.current) {
        rMostRecentlyActiveDropdownItem.current = itemsInDropdown[0];
      }
      dropdownFirstItem2 = rMostRecentlyActiveDropdownItem.current;
      if (!itemsInDropdown.includes(dropdownFirstItem2)) {
        dropdownFirstItem2 = itemsInDropdown[0];
      }
    }
    rMostRecentlyActiveDropdownItem.current = dropdownFirstItem2;
    return dropdownFirstItem2;
  }, [activeTLUiToolbarItem, itemsInDropdown]);
  (0, import_react.useEffect)(() => {
    const itemsWithShortcuts = [...itemsInPanel, dropdownFirstItem];
    for (let i = 0; i < Math.min(10, itemsWithShortcuts.length); i++) {
      const indexKbd = `${i + 1}`.slice(-1);
      (0, import_hotkeys_js.default)(indexKbd, (event) => {
        if ((0, import_useKeyboardShortcuts.areShortcutsDisabled)(editor))
          return;
        (0, import_editor.preventDefault)(event);
        itemsWithShortcuts[i].toolItem.onSelect("kbd");
      });
    }
    return () => {
      import_hotkeys_js.default.unbind("1,2,3,4,5,6,7,8,9,0");
    };
  }, [dropdownFirstItem, editor, itemsInPanel]);
  const { ActionsMenu, QuickActions } = (0, import_components.useTldrawUiComponents)();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "tlui-toolbar", children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "tlui-toolbar__inner", children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "tlui-toolbar__left", children: [
      !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "tlui-toolbar__extras", children: [
        breakpoint < import_constants.PORTRAIT_BREAKPOINT.TABLET && /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("div", { className: "tlui-toolbar__extras__controls tlui-buttons__horizontal", children: [
          QuickActions && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(QuickActions, {}),
          ActionsMenu && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ActionsMenu, {})
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ToggleToolLockedButton.ToggleToolLockedButton, { activeToolId })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
        "div",
        {
          className: (0, import_classnames.default)("tlui-toolbar__tools", {
            "tlui-toolbar__tools__mobile": breakpoint < import_constants.PORTRAIT_BREAKPOINT.TABLET_SM
          }),
          children: [
            itemsInPanel.map(({ toolItem }) => {
              return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                ToolbarButton,
                {
                  item: toolItem,
                  title: getTitle(toolItem),
                  isSelected: isActiveTLUiToolItem(toolItem, activeToolId, geoState)
                },
                toolItem.id
              );
            }),
            itemsInDropdown.length ? /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                ToolbarButton,
                {
                  item: dropdownFirstItem.toolItem,
                  title: getTitle(dropdownFirstItem.toolItem),
                  isSelected: isActiveTLUiToolItem(
                    dropdownFirstItem.toolItem,
                    activeToolId,
                    geoState
                  )
                },
                dropdownFirstItem.toolItem.id
              ),
              /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_TldrawUiDropdownMenu.TldrawUiDropdownMenuRoot, { id: "toolbar overflow", modal: false, children: [
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_TldrawUiDropdownMenu.TldrawUiDropdownMenuTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
                  import_TldrawUiButton.TldrawUiButton,
                  {
                    title: msg("tool-panel.more"),
                    type: "tool",
                    className: "tlui-toolbar__overflow",
                    "data-testid": "tools.more-button",
                    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_TldrawUiButtonIcon.TldrawUiButtonIcon, { icon: "chevron-up" })
                  }
                ) }),
                /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_TldrawUiDropdownMenu.TldrawUiDropdownMenuContent, { side: "top", align: "center", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(OverflowToolsContent, { toolbarItems: itemsInDropdown }) })
              ] })
            ] }) : null
          ]
        }
      )
    ] }),
    breakpoint < import_constants.PORTRAIT_BREAKPOINT.TABLET_SM && !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "tlui-toolbar__tools", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_MobileStylePanel.MobileStylePanel, {}) })
  ] }) });
});
const OverflowToolsContent = (0, import_editor.track)(function OverflowToolsContent2({
  toolbarItems
}) {
  const msg = (0, import_useTranslation.useTranslation)();
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { className: "tlui-buttons__grid", "data-testid": "tools.more-content", children: toolbarItems.map(({ toolItem: { id, meta, kbd, label, onSelect, icon } }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_TldrawUiDropdownMenu.TldrawUiDropdownMenuItem,
      {
        "data-tool": id,
        "data-geo": meta?.geo ?? "",
        "aria-label": label,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_TldrawUiButton.TldrawUiButton,
          {
            type: "icon",
            className: "tlui-button-grid__button",
            onClick: () => onSelect("toolbar"),
            "data-testid": `tools.more.${id}`,
            title: label ? `${msg(label)} ${kbd ? (0, import_kbd_utils.kbdStr)(kbd) : ""}` : "",
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_TldrawUiButtonIcon.TldrawUiButtonIcon, { icon })
          }
        )
      },
      id
    );
  }) });
});
function ToolbarButton({
  item,
  title,
  isSelected
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_TldrawUiButton.TldrawUiButton,
    {
      type: "tool",
      "data-testid": `tools.${item.id}`,
      "data-tool": item.id,
      "data-geo": item.meta?.geo ?? "",
      "aria-label": item.label,
      "data-state": isSelected ? "selected" : void 0,
      onClick: () => item.onSelect("toolbar"),
      title,
      onTouchStart: (e) => {
        (0, import_editor.preventDefault)(e);
        item.onSelect("toolbar");
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_TldrawUiButtonIcon.TldrawUiButtonIcon, { icon: item.icon })
    }
  );
}
const isActiveTLUiToolItem = (item, activeToolId, geoState) => {
  return item.meta?.geo ? activeToolId === "geo" && geoState === item.meta?.geo : activeToolId === item.id;
};
function useToolbarItems() {
  const breakpoint = (0, import_breakpoints.useBreakpoint)();
  const allToolbarItems = (0, import_useToolbarSchema.useToolbarSchema)();
  const isReadonlyMode = (0, import_useReadonly.useReadonly)();
  return (0, import_react.useMemo)(() => {
    const visibleItems = allToolbarItems.filter((item) => !isReadonlyMode || item.readonlyOk);
    const overflowIndex = Math.min(8, 5 + breakpoint);
    const itemsInPanel = visibleItems.slice(0, overflowIndex);
    const itemsInDropdown = visibleItems.slice(overflowIndex);
    if (itemsInDropdown.length <= 2) {
      return {
        itemsInPanel: visibleItems,
        itemsInDropdown: []
      };
    }
    return { itemsInPanel, itemsInDropdown };
  }, [allToolbarItems, breakpoint, isReadonlyMode]);
}
//# sourceMappingURL=DefaultToolbar.js.map
