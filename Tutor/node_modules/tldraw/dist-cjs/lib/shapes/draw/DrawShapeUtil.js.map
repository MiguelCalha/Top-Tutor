{
  "version": 3,
  "sources": ["../../../../src/lib/shapes/draw/DrawShapeUtil.tsx"],
  "sourcesContent": ["/* eslint-disable react-hooks/rules-of-hooks */\nimport {\n\tBox,\n\tCircle2d,\n\tPolygon2d,\n\tPolyline2d,\n\tSVGContainer,\n\tShapeUtil,\n\tSvgExportContext,\n\tTLDrawShape,\n\tTLDrawShapeSegment,\n\tTLOnResizeHandler,\n\tTLShapeUtilCanvasSvgDef,\n\tVecLike,\n\tdrawShapeMigrations,\n\tdrawShapeProps,\n\tgetDefaultColorTheme,\n\tgetSvgPathFromPoints,\n\tlast,\n\trng,\n\ttoFixed,\n} from '@tldraw/editor'\nimport { ShapeFill, getShapeFillSvg, useDefaultColorTheme } from '../shared/ShapeFill'\nimport { STROKE_SIZES } from '../shared/default-shape-constants'\nimport { getFillDefForCanvas, getFillDefForExport } from '../shared/defaultStyleDefs'\nimport { getStrokeOutlinePoints } from '../shared/freehand/getStrokeOutlinePoints'\nimport { getStrokePoints } from '../shared/freehand/getStrokePoints'\nimport { setStrokePointRadii } from '../shared/freehand/setStrokePointRadii'\nimport { getSvgPathFromStrokePoints } from '../shared/freehand/svg'\nimport { svgInk } from '../shared/freehand/svgInk'\nimport { useForceSolid } from '../shared/useForceSolid'\nimport { getDrawShapeStrokeDashArray, getFreehandOptions, getPointsFromSegments } from './getPath'\n\n/** @public */\nexport class DrawShapeUtil extends ShapeUtil<TLDrawShape> {\n\tstatic override type = 'draw' as const\n\tstatic override props = drawShapeProps\n\tstatic override migrations = drawShapeMigrations\n\n\toverride hideResizeHandles = (shape: TLDrawShape) => getIsDot(shape)\n\toverride hideRotateHandle = (shape: TLDrawShape) => getIsDot(shape)\n\toverride hideSelectionBoundsFg = (shape: TLDrawShape) => getIsDot(shape)\n\n\toverride getDefaultProps(): TLDrawShape['props'] {\n\t\treturn {\n\t\t\tsegments: [],\n\t\t\tcolor: 'black',\n\t\t\tfill: 'none',\n\t\t\tdash: 'draw',\n\t\t\tsize: 'm',\n\t\t\tisComplete: false,\n\t\t\tisClosed: false,\n\t\t\tisPen: false,\n\t\t}\n\t}\n\n\tgetGeometry(shape: TLDrawShape) {\n\t\tconst points = getPointsFromSegments(shape.props.segments)\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\n\t\t// A dot\n\t\tif (shape.props.segments.length === 1) {\n\t\t\tconst box = Box.FromPoints(points)\n\t\t\tif (box.width < strokeWidth * 2 && box.height < strokeWidth * 2) {\n\t\t\t\treturn new Circle2d({\n\t\t\t\t\tx: -strokeWidth,\n\t\t\t\t\ty: -strokeWidth,\n\t\t\t\t\tradius: strokeWidth,\n\t\t\t\t\tisFilled: true,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tconst strokePoints = getStrokePoints(\n\t\t\tpoints,\n\t\t\tgetFreehandOptions(shape.props, strokeWidth, true, true)\n\t\t).map((p) => p.point)\n\n\t\t// A closed draw stroke\n\t\tif (shape.props.isClosed) {\n\t\t\treturn new Polygon2d({\n\t\t\t\tpoints: strokePoints,\n\t\t\t\tisFilled: shape.props.fill !== 'none',\n\t\t\t})\n\t\t}\n\n\t\t// An open draw stroke\n\t\treturn new Polyline2d({\n\t\t\tpoints: strokePoints,\n\t\t})\n\t}\n\n\tcomponent(shape: TLDrawShape) {\n\t\tconst theme = useDefaultColorTheme()\n\t\tconst forceSolid = useForceSolid()\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\t\tconst allPointsFromSegments = getPointsFromSegments(shape.props.segments)\n\n\t\tconst showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === 'straight'\n\n\t\tlet sw = strokeWidth\n\t\tif (\n\t\t\t!forceSolid &&\n\t\t\t!shape.props.isPen &&\n\t\t\tshape.props.dash === 'draw' &&\n\t\t\tallPointsFromSegments.length === 1\n\t\t) {\n\t\t\tsw += rng(shape.id)() * (strokeWidth / 6)\n\t\t}\n\n\t\tconst options = getFreehandOptions(shape.props, sw, showAsComplete, forceSolid)\n\n\t\tif (!forceSolid && shape.props.dash === 'draw') {\n\t\t\treturn (\n\t\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t\t{shape.props.isClosed && shape.props.fill && allPointsFromSegments.length > 1 ? (\n\t\t\t\t\t\t<ShapeFill\n\t\t\t\t\t\t\ttheme={theme}\n\t\t\t\t\t\t\tfill={shape.props.isClosed ? shape.props.fill : 'none'}\n\t\t\t\t\t\t\tcolor={shape.props.color}\n\t\t\t\t\t\t\td={getSvgPathFromStrokePoints(\n\t\t\t\t\t\t\t\tgetStrokePoints(allPointsFromSegments, options),\n\t\t\t\t\t\t\t\tshape.props.isClosed\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<path\n\t\t\t\t\t\td={svgInk(allPointsFromSegments, options)}\n\t\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\t\tfill={theme[shape.props.color].solid}\n\t\t\t\t\t/>\n\t\t\t\t</SVGContainer>\n\t\t\t)\n\t\t}\n\n\t\tconst strokePoints = getStrokePoints(allPointsFromSegments, options)\n\t\tconst isDot = strokePoints.length < 2\n\t\tconst solidStrokePath = isDot\n\t\t\t? getDot(allPointsFromSegments[0], 0)\n\t\t\t: getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed)\n\n\t\treturn (\n\t\t\t<SVGContainer id={shape.id}>\n\t\t\t\t<ShapeFill\n\t\t\t\t\ttheme={theme}\n\t\t\t\t\tcolor={shape.props.color}\n\t\t\t\t\tfill={isDot || shape.props.isClosed ? shape.props.fill : 'none'}\n\t\t\t\t\td={solidStrokePath}\n\t\t\t\t/>\n\t\t\t\t<path\n\t\t\t\t\td={solidStrokePath}\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tfill={isDot ? theme[shape.props.color].solid : 'none'}\n\t\t\t\t\tstroke={theme[shape.props.color].solid}\n\t\t\t\t\tstrokeWidth={strokeWidth}\n\t\t\t\t\tstrokeDasharray={isDot ? 'none' : getDrawShapeStrokeDashArray(shape, strokeWidth)}\n\t\t\t\t\tstrokeDashoffset=\"0\"\n\t\t\t\t/>\n\t\t\t</SVGContainer>\n\t\t)\n\t}\n\n\tindicator(shape: TLDrawShape) {\n\t\tconst forceSolid = useForceSolid()\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\t\tconst allPointsFromSegments = getPointsFromSegments(shape.props.segments)\n\n\t\tlet sw = strokeWidth\n\t\tif (\n\t\t\t!forceSolid &&\n\t\t\t!shape.props.isPen &&\n\t\t\tshape.props.dash === 'draw' &&\n\t\t\tallPointsFromSegments.length === 1\n\t\t) {\n\t\t\tsw += rng(shape.id)() * (strokeWidth / 6)\n\t\t}\n\n\t\tconst showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === 'straight'\n\t\tconst options = getFreehandOptions(shape.props, sw, showAsComplete, true)\n\t\tconst strokePoints = getStrokePoints(allPointsFromSegments, options)\n\t\tconst solidStrokePath =\n\t\t\tstrokePoints.length > 1\n\t\t\t\t? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed)\n\t\t\t\t: getDot(allPointsFromSegments[0], sw)\n\n\t\treturn <path d={solidStrokePath} />\n\t}\n\n\toverride toSvg(shape: TLDrawShape, ctx: SvgExportContext) {\n\t\tconst theme = getDefaultColorTheme({ isDarkMode: ctx.isDarkMode })\n\t\tctx.addExportDef(getFillDefForExport(shape.props.fill, theme))\n\n\t\tconst { color } = shape.props\n\n\t\tconst strokeWidth = STROKE_SIZES[shape.props.size]\n\t\tconst allPointsFromSegments = getPointsFromSegments(shape.props.segments)\n\n\t\tconst showAsComplete = shape.props.isComplete || last(shape.props.segments)?.type === 'straight'\n\n\t\tlet sw = strokeWidth\n\t\tif (!shape.props.isPen && shape.props.dash === 'draw' && allPointsFromSegments.length === 1) {\n\t\t\tsw += rng(shape.id)() * (strokeWidth / 6)\n\t\t}\n\n\t\tconst options = getFreehandOptions(shape.props, sw, showAsComplete, false)\n\t\tconst strokePoints = getStrokePoints(allPointsFromSegments, options)\n\t\tconst solidStrokePath =\n\t\t\tstrokePoints.length > 1\n\t\t\t\t? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed)\n\t\t\t\t: getDot(allPointsFromSegments[0], sw)\n\n\t\tlet foregroundPath: SVGPathElement | undefined\n\n\t\tif (shape.props.dash === 'draw' || strokePoints.length < 2) {\n\t\t\tsetStrokePointRadii(strokePoints, options)\n\t\t\tconst strokeOutlinePoints = getStrokeOutlinePoints(strokePoints, options)\n\n\t\t\tconst p = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\t\t\tp.setAttribute('d', getSvgPathFromPoints(strokeOutlinePoints, true))\n\t\t\tp.setAttribute('fill', theme[color].solid)\n\t\t\tp.setAttribute('stroke-linecap', 'round')\n\n\t\t\tforegroundPath = p\n\t\t} else {\n\t\t\tconst p = document.createElementNS('http://www.w3.org/2000/svg', 'path')\n\t\t\tp.setAttribute('d', solidStrokePath)\n\t\t\tp.setAttribute('stroke', theme[color].solid)\n\t\t\tp.setAttribute('fill', 'none')\n\t\t\tp.setAttribute('stroke-linecap', 'round')\n\t\t\tp.setAttribute('stroke-width', strokeWidth.toString())\n\t\t\tp.setAttribute('stroke-dasharray', getDrawShapeStrokeDashArray(shape, strokeWidth))\n\t\t\tp.setAttribute('stroke-dashoffset', '0')\n\n\t\t\tforegroundPath = p\n\t\t}\n\n\t\tconst fillPath = getShapeFillSvg({\n\t\t\tfill: shape.props.isClosed ? shape.props.fill : 'none',\n\t\t\td: solidStrokePath,\n\t\t\tcolor: shape.props.color,\n\t\t\ttheme,\n\t\t})\n\n\t\tif (fillPath) {\n\t\t\tconst g = document.createElementNS('http://www.w3.org/2000/svg', 'g')\n\t\t\tg.appendChild(fillPath)\n\t\t\tg.appendChild(foregroundPath)\n\t\t\treturn g\n\t\t}\n\n\t\treturn foregroundPath\n\t}\n\n\toverride getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {\n\t\treturn [getFillDefForCanvas()]\n\t}\n\n\toverride onResize: TLOnResizeHandler<TLDrawShape> = (shape, info) => {\n\t\tconst { scaleX, scaleY } = info\n\n\t\tconst newSegments: TLDrawShapeSegment[] = []\n\n\t\tfor (const segment of shape.props.segments) {\n\t\t\tnewSegments.push({\n\t\t\t\t...segment,\n\t\t\t\tpoints: segment.points.map(({ x, y, z }) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tx: toFixed(scaleX * x),\n\t\t\t\t\t\ty: toFixed(scaleY * y),\n\t\t\t\t\t\tz,\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t})\n\t\t}\n\n\t\treturn {\n\t\t\tprops: {\n\t\t\t\tsegments: newSegments,\n\t\t\t},\n\t\t}\n\t}\n\n\toverride expandSelectionOutlinePx(shape: TLDrawShape): number {\n\t\tconst multiplier = shape.props.dash === 'draw' ? 1.6 : 1\n\t\treturn (STROKE_SIZES[shape.props.size] * multiplier) / 2\n\t}\n}\n\nfunction getDot(point: VecLike, sw: number) {\n\tconst r = (sw + 1) * 0.5\n\treturn `M ${point.x} ${point.y} m -${r}, 0 a ${r},${r} 0 1,0 ${r * 2},0 a ${r},${r} 0 1,0 -${\n\t\tr * 2\n\t},0`\n}\n\nfunction getIsDot(shape: TLDrawShape) {\n\treturn shape.props.segments.length === 1 && shape.props.segments[0].points.length < 2\n}\n"],
  "mappings": "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",
  "names": []
}
